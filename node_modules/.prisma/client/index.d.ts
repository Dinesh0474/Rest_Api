
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Restaurant
 * 
 */
export type Restaurant = $Result.DefaultSelection<Prisma.$RestaurantPayload>
/**
 * Model RestaurantDetails
 * 
 */
export type RestaurantDetails = $Result.DefaultSelection<Prisma.$RestaurantDetailsPayload>
/**
 * Model Foodlists
 * 
 */
export type Foodlists = $Result.DefaultSelection<Prisma.$FoodlistsPayload>
/**
 * Model SimilarProducts
 * 
 */
export type SimilarProducts = $Result.DefaultSelection<Prisma.$SimilarProductsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Restaurants
 * const restaurants = await prisma.restaurant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Restaurants
   * const restaurants = await prisma.restaurant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.restaurant`: Exposes CRUD operations for the **Restaurant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurants
    * const restaurants = await prisma.restaurant.findMany()
    * ```
    */
  get restaurant(): Prisma.RestaurantDelegate<ExtArgs>;

  /**
   * `prisma.restaurantDetails`: Exposes CRUD operations for the **RestaurantDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RestaurantDetails
    * const restaurantDetails = await prisma.restaurantDetails.findMany()
    * ```
    */
  get restaurantDetails(): Prisma.RestaurantDetailsDelegate<ExtArgs>;

  /**
   * `prisma.foodlists`: Exposes CRUD operations for the **Foodlists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foodlists
    * const foodlists = await prisma.foodlists.findMany()
    * ```
    */
  get foodlists(): Prisma.FoodlistsDelegate<ExtArgs>;

  /**
   * `prisma.similarProducts`: Exposes CRUD operations for the **SimilarProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SimilarProducts
    * const similarProducts = await prisma.similarProducts.findMany()
    * ```
    */
  get similarProducts(): Prisma.SimilarProductsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Restaurant: 'Restaurant',
    RestaurantDetails: 'RestaurantDetails',
    Foodlists: 'Foodlists',
    SimilarProducts: 'SimilarProducts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'restaurant' | 'restaurantDetails' | 'foodlists' | 'similarProducts'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Restaurant: {
        payload: Prisma.$RestaurantPayload<ExtArgs>
        fields: Prisma.RestaurantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findFirst: {
            args: Prisma.RestaurantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          findMany: {
            args: Prisma.RestaurantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>[]
          }
          create: {
            args: Prisma.RestaurantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          createMany: {
            args: Prisma.RestaurantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RestaurantCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>[]
          }
          delete: {
            args: Prisma.RestaurantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          update: {
            args: Prisma.RestaurantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantPayload>
          }
          aggregate: {
            args: Prisma.RestaurantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRestaurant>
          }
          groupBy: {
            args: Prisma.RestaurantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantCountArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantCountAggregateOutputType> | number
          }
        }
      }
      RestaurantDetails: {
        payload: Prisma.$RestaurantDetailsPayload<ExtArgs>
        fields: Prisma.RestaurantDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantDetailsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantDetailsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          findFirst: {
            args: Prisma.RestaurantDetailsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantDetailsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          findMany: {
            args: Prisma.RestaurantDetailsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>[]
          }
          create: {
            args: Prisma.RestaurantDetailsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          createMany: {
            args: Prisma.RestaurantDetailsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RestaurantDetailsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>[]
          }
          delete: {
            args: Prisma.RestaurantDetailsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          update: {
            args: Prisma.RestaurantDetailsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantDetailsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantDetailsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantDetailsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RestaurantDetailsPayload>
          }
          aggregate: {
            args: Prisma.RestaurantDetailsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRestaurantDetails>
          }
          groupBy: {
            args: Prisma.RestaurantDetailsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantDetailsCountArgs<ExtArgs>,
            result: $Utils.Optional<RestaurantDetailsCountAggregateOutputType> | number
          }
        }
      }
      Foodlists: {
        payload: Prisma.$FoodlistsPayload<ExtArgs>
        fields: Prisma.FoodlistsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodlistsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodlistsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          findFirst: {
            args: Prisma.FoodlistsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodlistsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          findMany: {
            args: Prisma.FoodlistsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>[]
          }
          create: {
            args: Prisma.FoodlistsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          createMany: {
            args: Prisma.FoodlistsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodlistsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>[]
          }
          delete: {
            args: Prisma.FoodlistsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          update: {
            args: Prisma.FoodlistsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          deleteMany: {
            args: Prisma.FoodlistsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FoodlistsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FoodlistsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FoodlistsPayload>
          }
          aggregate: {
            args: Prisma.FoodlistsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFoodlists>
          }
          groupBy: {
            args: Prisma.FoodlistsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FoodlistsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodlistsCountArgs<ExtArgs>,
            result: $Utils.Optional<FoodlistsCountAggregateOutputType> | number
          }
        }
      }
      SimilarProducts: {
        payload: Prisma.$SimilarProductsPayload<ExtArgs>
        fields: Prisma.SimilarProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimilarProductsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimilarProductsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          findFirst: {
            args: Prisma.SimilarProductsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimilarProductsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          findMany: {
            args: Prisma.SimilarProductsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>[]
          }
          create: {
            args: Prisma.SimilarProductsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          createMany: {
            args: Prisma.SimilarProductsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SimilarProductsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>[]
          }
          delete: {
            args: Prisma.SimilarProductsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          update: {
            args: Prisma.SimilarProductsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          deleteMany: {
            args: Prisma.SimilarProductsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SimilarProductsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SimilarProductsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarProductsPayload>
          }
          aggregate: {
            args: Prisma.SimilarProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSimilarProducts>
          }
          groupBy: {
            args: Prisma.SimilarProductsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SimilarProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimilarProductsCountArgs<ExtArgs>,
            result: $Utils.Optional<SimilarProductsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RestaurantDetailsCountOutputType
   */

  export type RestaurantDetailsCountOutputType = {
    food_list: number
    similar_product: number
  }

  export type RestaurantDetailsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    food_list?: boolean | RestaurantDetailsCountOutputTypeCountFood_listArgs
    similar_product?: boolean | RestaurantDetailsCountOutputTypeCountSimilar_productArgs
  }

  // Custom InputTypes
  /**
   * RestaurantDetailsCountOutputType without action
   */
  export type RestaurantDetailsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetailsCountOutputType
     */
    select?: RestaurantDetailsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RestaurantDetailsCountOutputType without action
   */
  export type RestaurantDetailsCountOutputTypeCountFood_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodlistsWhereInput
  }

  /**
   * RestaurantDetailsCountOutputType without action
   */
  export type RestaurantDetailsCountOutputTypeCountSimilar_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimilarProductsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Restaurant
   */

  export type AggregateRestaurant = {
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  export type RestaurantAvgAggregateOutputType = {
    id: number | null
  }

  export type RestaurantSumAggregateOutputType = {
    id: number | null
  }

  export type RestaurantMinAggregateOutputType = {
    id: number | null
    restaurant_id: string | null
    image_url: string | null
    title: string | null
    rating: string | null
    timing: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RestaurantMaxAggregateOutputType = {
    id: number | null
    restaurant_id: string | null
    image_url: string | null
    title: string | null
    rating: string | null
    timing: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RestaurantCountAggregateOutputType = {
    id: number
    restaurant_id: number
    image_url: number
    title: number
    rating: number
    timing: number
    location: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RestaurantAvgAggregateInputType = {
    id?: true
  }

  export type RestaurantSumAggregateInputType = {
    id?: true
  }

  export type RestaurantMinAggregateInputType = {
    id?: true
    restaurant_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RestaurantMaxAggregateInputType = {
    id?: true
    restaurant_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RestaurantCountAggregateInputType = {
    id?: true
    restaurant_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RestaurantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurant to aggregate.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurants
    **/
    _count?: true | RestaurantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestaurantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestaurantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantMaxAggregateInputType
  }

  export type GetRestaurantAggregateType<T extends RestaurantAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurant[P]>
      : GetScalarType<T[P], AggregateRestaurant[P]>
  }




  export type RestaurantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantWhereInput
    orderBy?: RestaurantOrderByWithAggregationInput | RestaurantOrderByWithAggregationInput[]
    by: RestaurantScalarFieldEnum[] | RestaurantScalarFieldEnum
    having?: RestaurantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantCountAggregateInputType | true
    _avg?: RestaurantAvgAggregateInputType
    _sum?: RestaurantSumAggregateInputType
    _min?: RestaurantMinAggregateInputType
    _max?: RestaurantMaxAggregateInputType
  }

  export type RestaurantGroupByOutputType = {
    id: number
    restaurant_id: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt: Date
    updatedAt: Date
    _count: RestaurantCountAggregateOutputType | null
    _avg: RestaurantAvgAggregateOutputType | null
    _sum: RestaurantSumAggregateOutputType | null
    _min: RestaurantMinAggregateOutputType | null
    _max: RestaurantMaxAggregateOutputType | null
  }

  type GetRestaurantGroupByPayload<T extends RestaurantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restaurant_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    restaurant_details?: boolean | Restaurant$restaurant_detailsArgs<ExtArgs>
  }, ExtArgs["result"]["restaurant"]>

  export type RestaurantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restaurant_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["restaurant"]>

  export type RestaurantSelectScalar = {
    id?: boolean
    restaurant_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RestaurantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant_details?: boolean | Restaurant$restaurant_detailsArgs<ExtArgs>
  }
  export type RestaurantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RestaurantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Restaurant"
    objects: {
      restaurant_details: Prisma.$RestaurantDetailsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      restaurant_id: string
      image_url: string
      title: string
      rating: string
      timing: string
      location: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["restaurant"]>
    composites: {}
  }

  type RestaurantGetPayload<S extends boolean | null | undefined | RestaurantDefaultArgs> = $Result.GetResult<Prisma.$RestaurantPayload, S>

  type RestaurantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RestaurantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RestaurantCountAggregateInputType | true
    }

  export interface RestaurantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Restaurant'], meta: { name: 'Restaurant' } }
    /**
     * Find zero or one Restaurant that matches the filter.
     * @param {RestaurantFindUniqueArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestaurantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantFindUniqueArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Restaurant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RestaurantFindUniqueOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestaurantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestaurantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Restaurant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindFirstOrThrowArgs} args - Arguments to find a Restaurant
     * @example
     * // Get one Restaurant
     * const restaurant = await prisma.restaurant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestaurantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Restaurants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurants
     * const restaurants = await prisma.restaurant.findMany()
     * 
     * // Get first 10 Restaurants
     * const restaurants = await prisma.restaurant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restaurantWithIdOnly = await prisma.restaurant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestaurantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Restaurant.
     * @param {RestaurantCreateArgs} args - Arguments to create a Restaurant.
     * @example
     * // Create one Restaurant
     * const Restaurant = await prisma.restaurant.create({
     *   data: {
     *     // ... data to create a Restaurant
     *   }
     * })
     * 
    **/
    create<T extends RestaurantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantCreateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Restaurants.
     * @param {RestaurantCreateManyArgs} args - Arguments to create many Restaurants.
     * @example
     * // Create many Restaurants
     * const restaurant = await prisma.restaurant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RestaurantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Restaurants and returns the data saved in the database.
     * @param {RestaurantCreateManyAndReturnArgs} args - Arguments to create many Restaurants.
     * @example
     * // Create many Restaurants
     * const restaurant = await prisma.restaurant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Restaurants and only return the `id`
     * const restaurantWithIdOnly = await prisma.restaurant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RestaurantCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Restaurant.
     * @param {RestaurantDeleteArgs} args - Arguments to delete one Restaurant.
     * @example
     * // Delete one Restaurant
     * const Restaurant = await prisma.restaurant.delete({
     *   where: {
     *     // ... filter to delete one Restaurant
     *   }
     * })
     * 
    **/
    delete<T extends RestaurantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDeleteArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Restaurant.
     * @param {RestaurantUpdateArgs} args - Arguments to update one Restaurant.
     * @example
     * // Update one Restaurant
     * const restaurant = await prisma.restaurant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestaurantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Restaurants.
     * @param {RestaurantDeleteManyArgs} args - Arguments to filter Restaurants to delete.
     * @example
     * // Delete a few Restaurants
     * const { count } = await prisma.restaurant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestaurantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurants
     * const restaurant = await prisma.restaurant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestaurantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurant.
     * @param {RestaurantUpsertArgs} args - Arguments to update or create a Restaurant.
     * @example
     * // Update or create a Restaurant
     * const restaurant = await prisma.restaurant.upsert({
     *   create: {
     *     // ... data to create a Restaurant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurant we want to update
     *   }
     * })
    **/
    upsert<T extends RestaurantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantUpsertArgs<ExtArgs>>
    ): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Restaurants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantCountArgs} args - Arguments to filter Restaurants to count.
     * @example
     * // Count the number of Restaurants
     * const count = await prisma.restaurant.count({
     *   where: {
     *     // ... the filter for the Restaurants we want to count
     *   }
     * })
    **/
    count<T extends RestaurantCountArgs>(
      args?: Subset<T, RestaurantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantAggregateArgs>(args: Subset<T, RestaurantAggregateArgs>): Prisma.PrismaPromise<GetRestaurantAggregateType<T>>

    /**
     * Group by Restaurant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Restaurant model
   */
  readonly fields: RestaurantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    restaurant_details<T extends Restaurant$restaurant_detailsArgs<ExtArgs> = {}>(args?: Subset<T, Restaurant$restaurant_detailsArgs<ExtArgs>>): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Restaurant model
   */ 
  interface RestaurantFieldRefs {
    readonly id: FieldRef<"Restaurant", 'Int'>
    readonly restaurant_id: FieldRef<"Restaurant", 'String'>
    readonly image_url: FieldRef<"Restaurant", 'String'>
    readonly title: FieldRef<"Restaurant", 'String'>
    readonly rating: FieldRef<"Restaurant", 'String'>
    readonly timing: FieldRef<"Restaurant", 'String'>
    readonly location: FieldRef<"Restaurant", 'String'>
    readonly createdAt: FieldRef<"Restaurant", 'DateTime'>
    readonly updatedAt: FieldRef<"Restaurant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Restaurant findUnique
   */
  export type RestaurantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant findUniqueOrThrow
   */
  export type RestaurantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant findFirst
   */
  export type RestaurantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant findFirstOrThrow
   */
  export type RestaurantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurant to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurants.
     */
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant findMany
   */
  export type RestaurantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter, which Restaurants to fetch.
     */
    where?: RestaurantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurants to fetch.
     */
    orderBy?: RestaurantOrderByWithRelationInput | RestaurantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurants.
     */
    cursor?: RestaurantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurants.
     */
    skip?: number
    distinct?: RestaurantScalarFieldEnum | RestaurantScalarFieldEnum[]
  }

  /**
   * Restaurant create
   */
  export type RestaurantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to create a Restaurant.
     */
    data: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
  }

  /**
   * Restaurant createMany
   */
  export type RestaurantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Restaurants.
     */
    data: RestaurantCreateManyInput | RestaurantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Restaurant createManyAndReturn
   */
  export type RestaurantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Restaurants.
     */
    data: RestaurantCreateManyInput | RestaurantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Restaurant update
   */
  export type RestaurantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The data needed to update a Restaurant.
     */
    data: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
    /**
     * Choose, which Restaurant to update.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant updateMany
   */
  export type RestaurantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Restaurants.
     */
    data: XOR<RestaurantUpdateManyMutationInput, RestaurantUncheckedUpdateManyInput>
    /**
     * Filter which Restaurants to update
     */
    where?: RestaurantWhereInput
  }

  /**
   * Restaurant upsert
   */
  export type RestaurantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * The filter to search for the Restaurant to update in case it exists.
     */
    where: RestaurantWhereUniqueInput
    /**
     * In case the Restaurant found by the `where` argument doesn't exist, create a new Restaurant with this data.
     */
    create: XOR<RestaurantCreateInput, RestaurantUncheckedCreateInput>
    /**
     * In case the Restaurant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantUpdateInput, RestaurantUncheckedUpdateInput>
  }

  /**
   * Restaurant delete
   */
  export type RestaurantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
    /**
     * Filter which Restaurant to delete.
     */
    where: RestaurantWhereUniqueInput
  }

  /**
   * Restaurant deleteMany
   */
  export type RestaurantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Restaurants to delete
     */
    where?: RestaurantWhereInput
  }

  /**
   * Restaurant.restaurant_details
   */
  export type Restaurant$restaurant_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    where?: RestaurantDetailsWhereInput
  }

  /**
   * Restaurant without action
   */
  export type RestaurantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Restaurant
     */
    select?: RestaurantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantInclude<ExtArgs> | null
  }


  /**
   * Model RestaurantDetails
   */

  export type AggregateRestaurantDetails = {
    _count: RestaurantDetailsCountAggregateOutputType | null
    _avg: RestaurantDetailsAvgAggregateOutputType | null
    _sum: RestaurantDetailsSumAggregateOutputType | null
    _min: RestaurantDetailsMinAggregateOutputType | null
    _max: RestaurantDetailsMaxAggregateOutputType | null
  }

  export type RestaurantDetailsAvgAggregateOutputType = {
    id: number | null
  }

  export type RestaurantDetailsSumAggregateOutputType = {
    id: number | null
  }

  export type RestaurantDetailsMinAggregateOutputType = {
    id: number | null
    restaurant_details_id: string | null
    title: string | null
    rating: string | null
    price: string | null
    location: string | null
    timing: string | null
    restaurant_text: string | null
    restaurant_id: string | null
  }

  export type RestaurantDetailsMaxAggregateOutputType = {
    id: number | null
    restaurant_details_id: string | null
    title: string | null
    rating: string | null
    price: string | null
    location: string | null
    timing: string | null
    restaurant_text: string | null
    restaurant_id: string | null
  }

  export type RestaurantDetailsCountAggregateOutputType = {
    id: number
    restaurant_details_id: number
    title: number
    rating: number
    price: number
    location: number
    timing: number
    restaurant_text: number
    restaurant_id: number
    _all: number
  }


  export type RestaurantDetailsAvgAggregateInputType = {
    id?: true
  }

  export type RestaurantDetailsSumAggregateInputType = {
    id?: true
  }

  export type RestaurantDetailsMinAggregateInputType = {
    id?: true
    restaurant_details_id?: true
    title?: true
    rating?: true
    price?: true
    location?: true
    timing?: true
    restaurant_text?: true
    restaurant_id?: true
  }

  export type RestaurantDetailsMaxAggregateInputType = {
    id?: true
    restaurant_details_id?: true
    title?: true
    rating?: true
    price?: true
    location?: true
    timing?: true
    restaurant_text?: true
    restaurant_id?: true
  }

  export type RestaurantDetailsCountAggregateInputType = {
    id?: true
    restaurant_details_id?: true
    title?: true
    rating?: true
    price?: true
    location?: true
    timing?: true
    restaurant_text?: true
    restaurant_id?: true
    _all?: true
  }

  export type RestaurantDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantDetails to aggregate.
     */
    where?: RestaurantDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantDetails to fetch.
     */
    orderBy?: RestaurantDetailsOrderByWithRelationInput | RestaurantDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RestaurantDetails
    **/
    _count?: true | RestaurantDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestaurantDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestaurantDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantDetailsMaxAggregateInputType
  }

  export type GetRestaurantDetailsAggregateType<T extends RestaurantDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurantDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurantDetails[P]>
      : GetScalarType<T[P], AggregateRestaurantDetails[P]>
  }




  export type RestaurantDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantDetailsWhereInput
    orderBy?: RestaurantDetailsOrderByWithAggregationInput | RestaurantDetailsOrderByWithAggregationInput[]
    by: RestaurantDetailsScalarFieldEnum[] | RestaurantDetailsScalarFieldEnum
    having?: RestaurantDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantDetailsCountAggregateInputType | true
    _avg?: RestaurantDetailsAvgAggregateInputType
    _sum?: RestaurantDetailsSumAggregateInputType
    _min?: RestaurantDetailsMinAggregateInputType
    _max?: RestaurantDetailsMaxAggregateInputType
  }

  export type RestaurantDetailsGroupByOutputType = {
    id: number
    restaurant_details_id: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant_id: string
    _count: RestaurantDetailsCountAggregateOutputType | null
    _avg: RestaurantDetailsAvgAggregateOutputType | null
    _sum: RestaurantDetailsSumAggregateOutputType | null
    _min: RestaurantDetailsMinAggregateOutputType | null
    _max: RestaurantDetailsMaxAggregateOutputType | null
  }

  type GetRestaurantDetailsGroupByPayload<T extends RestaurantDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantDetailsGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restaurant_details_id?: boolean
    title?: boolean
    rating?: boolean
    price?: boolean
    location?: boolean
    timing?: boolean
    restaurant_text?: boolean
    restaurant_id?: boolean
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    food_list?: boolean | RestaurantDetails$food_listArgs<ExtArgs>
    similar_product?: boolean | RestaurantDetails$similar_productArgs<ExtArgs>
    _count?: boolean | RestaurantDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurantDetails"]>

  export type RestaurantDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    restaurant_details_id?: boolean
    title?: boolean
    rating?: boolean
    price?: boolean
    location?: boolean
    timing?: boolean
    restaurant_text?: boolean
    restaurant_id?: boolean
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurantDetails"]>

  export type RestaurantDetailsSelectScalar = {
    id?: boolean
    restaurant_details_id?: boolean
    title?: boolean
    rating?: boolean
    price?: boolean
    location?: boolean
    timing?: boolean
    restaurant_text?: boolean
    restaurant_id?: boolean
  }

  export type RestaurantDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
    food_list?: boolean | RestaurantDetails$food_listArgs<ExtArgs>
    similar_product?: boolean | RestaurantDetails$similar_productArgs<ExtArgs>
    _count?: boolean | RestaurantDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RestaurantDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant?: boolean | RestaurantDefaultArgs<ExtArgs>
  }

  export type $RestaurantDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RestaurantDetails"
    objects: {
      restaurant: Prisma.$RestaurantPayload<ExtArgs>
      food_list: Prisma.$FoodlistsPayload<ExtArgs>[]
      similar_product: Prisma.$SimilarProductsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      restaurant_details_id: string
      title: string
      rating: string
      price: string
      location: string
      timing: string
      restaurant_text: string
      restaurant_id: string
    }, ExtArgs["result"]["restaurantDetails"]>
    composites: {}
  }

  type RestaurantDetailsGetPayload<S extends boolean | null | undefined | RestaurantDetailsDefaultArgs> = $Result.GetResult<Prisma.$RestaurantDetailsPayload, S>

  type RestaurantDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RestaurantDetailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RestaurantDetailsCountAggregateInputType | true
    }

  export interface RestaurantDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RestaurantDetails'], meta: { name: 'RestaurantDetails' } }
    /**
     * Find zero or one RestaurantDetails that matches the filter.
     * @param {RestaurantDetailsFindUniqueArgs} args - Arguments to find a RestaurantDetails
     * @example
     * // Get one RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestaurantDetailsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsFindUniqueArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RestaurantDetails that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RestaurantDetailsFindUniqueOrThrowArgs} args - Arguments to find a RestaurantDetails
     * @example
     * // Get one RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestaurantDetailsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RestaurantDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsFindFirstArgs} args - Arguments to find a RestaurantDetails
     * @example
     * // Get one RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestaurantDetailsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsFindFirstArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RestaurantDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsFindFirstOrThrowArgs} args - Arguments to find a RestaurantDetails
     * @example
     * // Get one RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestaurantDetailsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RestaurantDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findMany()
     * 
     * // Get first 10 RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restaurantDetailsWithIdOnly = await prisma.restaurantDetails.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestaurantDetailsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RestaurantDetails.
     * @param {RestaurantDetailsCreateArgs} args - Arguments to create a RestaurantDetails.
     * @example
     * // Create one RestaurantDetails
     * const RestaurantDetails = await prisma.restaurantDetails.create({
     *   data: {
     *     // ... data to create a RestaurantDetails
     *   }
     * })
     * 
    **/
    create<T extends RestaurantDetailsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsCreateArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RestaurantDetails.
     * @param {RestaurantDetailsCreateManyArgs} args - Arguments to create many RestaurantDetails.
     * @example
     * // Create many RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RestaurantDetailsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RestaurantDetails and returns the data saved in the database.
     * @param {RestaurantDetailsCreateManyAndReturnArgs} args - Arguments to create many RestaurantDetails.
     * @example
     * // Create many RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RestaurantDetails and only return the `id`
     * const restaurantDetailsWithIdOnly = await prisma.restaurantDetails.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RestaurantDetailsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a RestaurantDetails.
     * @param {RestaurantDetailsDeleteArgs} args - Arguments to delete one RestaurantDetails.
     * @example
     * // Delete one RestaurantDetails
     * const RestaurantDetails = await prisma.restaurantDetails.delete({
     *   where: {
     *     // ... filter to delete one RestaurantDetails
     *   }
     * })
     * 
    **/
    delete<T extends RestaurantDetailsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsDeleteArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RestaurantDetails.
     * @param {RestaurantDetailsUpdateArgs} args - Arguments to update one RestaurantDetails.
     * @example
     * // Update one RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestaurantDetailsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsUpdateArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RestaurantDetails.
     * @param {RestaurantDetailsDeleteManyArgs} args - Arguments to filter RestaurantDetails to delete.
     * @example
     * // Delete a few RestaurantDetails
     * const { count } = await prisma.restaurantDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestaurantDetailsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RestaurantDetailsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RestaurantDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestaurantDetailsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RestaurantDetails.
     * @param {RestaurantDetailsUpsertArgs} args - Arguments to update or create a RestaurantDetails.
     * @example
     * // Update or create a RestaurantDetails
     * const restaurantDetails = await prisma.restaurantDetails.upsert({
     *   create: {
     *     // ... data to create a RestaurantDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RestaurantDetails we want to update
     *   }
     * })
    **/
    upsert<T extends RestaurantDetailsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RestaurantDetailsUpsertArgs<ExtArgs>>
    ): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RestaurantDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsCountArgs} args - Arguments to filter RestaurantDetails to count.
     * @example
     * // Count the number of RestaurantDetails
     * const count = await prisma.restaurantDetails.count({
     *   where: {
     *     // ... the filter for the RestaurantDetails we want to count
     *   }
     * })
    **/
    count<T extends RestaurantDetailsCountArgs>(
      args?: Subset<T, RestaurantDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RestaurantDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantDetailsAggregateArgs>(args: Subset<T, RestaurantDetailsAggregateArgs>): Prisma.PrismaPromise<GetRestaurantDetailsAggregateType<T>>

    /**
     * Group by RestaurantDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantDetailsGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RestaurantDetails model
   */
  readonly fields: RestaurantDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RestaurantDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    restaurant<T extends RestaurantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDefaultArgs<ExtArgs>>): Prisma__RestaurantClient<$Result.GetResult<Prisma.$RestaurantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    food_list<T extends RestaurantDetails$food_listArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDetails$food_listArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findMany'> | Null>;

    similar_product<T extends RestaurantDetails$similar_productArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDetails$similar_productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RestaurantDetails model
   */ 
  interface RestaurantDetailsFieldRefs {
    readonly id: FieldRef<"RestaurantDetails", 'Int'>
    readonly restaurant_details_id: FieldRef<"RestaurantDetails", 'String'>
    readonly title: FieldRef<"RestaurantDetails", 'String'>
    readonly rating: FieldRef<"RestaurantDetails", 'String'>
    readonly price: FieldRef<"RestaurantDetails", 'String'>
    readonly location: FieldRef<"RestaurantDetails", 'String'>
    readonly timing: FieldRef<"RestaurantDetails", 'String'>
    readonly restaurant_text: FieldRef<"RestaurantDetails", 'String'>
    readonly restaurant_id: FieldRef<"RestaurantDetails", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RestaurantDetails findUnique
   */
  export type RestaurantDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantDetails to fetch.
     */
    where: RestaurantDetailsWhereUniqueInput
  }

  /**
   * RestaurantDetails findUniqueOrThrow
   */
  export type RestaurantDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantDetails to fetch.
     */
    where: RestaurantDetailsWhereUniqueInput
  }

  /**
   * RestaurantDetails findFirst
   */
  export type RestaurantDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantDetails to fetch.
     */
    where?: RestaurantDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantDetails to fetch.
     */
    orderBy?: RestaurantDetailsOrderByWithRelationInput | RestaurantDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantDetails.
     */
    cursor?: RestaurantDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantDetails.
     */
    distinct?: RestaurantDetailsScalarFieldEnum | RestaurantDetailsScalarFieldEnum[]
  }

  /**
   * RestaurantDetails findFirstOrThrow
   */
  export type RestaurantDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantDetails to fetch.
     */
    where?: RestaurantDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantDetails to fetch.
     */
    orderBy?: RestaurantDetailsOrderByWithRelationInput | RestaurantDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantDetails.
     */
    cursor?: RestaurantDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantDetails.
     */
    distinct?: RestaurantDetailsScalarFieldEnum | RestaurantDetailsScalarFieldEnum[]
  }

  /**
   * RestaurantDetails findMany
   */
  export type RestaurantDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantDetails to fetch.
     */
    where?: RestaurantDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantDetails to fetch.
     */
    orderBy?: RestaurantDetailsOrderByWithRelationInput | RestaurantDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RestaurantDetails.
     */
    cursor?: RestaurantDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantDetails.
     */
    skip?: number
    distinct?: RestaurantDetailsScalarFieldEnum | RestaurantDetailsScalarFieldEnum[]
  }

  /**
   * RestaurantDetails create
   */
  export type RestaurantDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a RestaurantDetails.
     */
    data: XOR<RestaurantDetailsCreateInput, RestaurantDetailsUncheckedCreateInput>
  }

  /**
   * RestaurantDetails createMany
   */
  export type RestaurantDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RestaurantDetails.
     */
    data: RestaurantDetailsCreateManyInput | RestaurantDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RestaurantDetails createManyAndReturn
   */
  export type RestaurantDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RestaurantDetails.
     */
    data: RestaurantDetailsCreateManyInput | RestaurantDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RestaurantDetails update
   */
  export type RestaurantDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a RestaurantDetails.
     */
    data: XOR<RestaurantDetailsUpdateInput, RestaurantDetailsUncheckedUpdateInput>
    /**
     * Choose, which RestaurantDetails to update.
     */
    where: RestaurantDetailsWhereUniqueInput
  }

  /**
   * RestaurantDetails updateMany
   */
  export type RestaurantDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RestaurantDetails.
     */
    data: XOR<RestaurantDetailsUpdateManyMutationInput, RestaurantDetailsUncheckedUpdateManyInput>
    /**
     * Filter which RestaurantDetails to update
     */
    where?: RestaurantDetailsWhereInput
  }

  /**
   * RestaurantDetails upsert
   */
  export type RestaurantDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the RestaurantDetails to update in case it exists.
     */
    where: RestaurantDetailsWhereUniqueInput
    /**
     * In case the RestaurantDetails found by the `where` argument doesn't exist, create a new RestaurantDetails with this data.
     */
    create: XOR<RestaurantDetailsCreateInput, RestaurantDetailsUncheckedCreateInput>
    /**
     * In case the RestaurantDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantDetailsUpdateInput, RestaurantDetailsUncheckedUpdateInput>
  }

  /**
   * RestaurantDetails delete
   */
  export type RestaurantDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
    /**
     * Filter which RestaurantDetails to delete.
     */
    where: RestaurantDetailsWhereUniqueInput
  }

  /**
   * RestaurantDetails deleteMany
   */
  export type RestaurantDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantDetails to delete
     */
    where?: RestaurantDetailsWhereInput
  }

  /**
   * RestaurantDetails.food_list
   */
  export type RestaurantDetails$food_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    where?: FoodlistsWhereInput
    orderBy?: FoodlistsOrderByWithRelationInput | FoodlistsOrderByWithRelationInput[]
    cursor?: FoodlistsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodlistsScalarFieldEnum | FoodlistsScalarFieldEnum[]
  }

  /**
   * RestaurantDetails.similar_product
   */
  export type RestaurantDetails$similar_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    where?: SimilarProductsWhereInput
    orderBy?: SimilarProductsOrderByWithRelationInput | SimilarProductsOrderByWithRelationInput[]
    cursor?: SimilarProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SimilarProductsScalarFieldEnum | SimilarProductsScalarFieldEnum[]
  }

  /**
   * RestaurantDetails without action
   */
  export type RestaurantDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantDetails
     */
    select?: RestaurantDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantDetailsInclude<ExtArgs> | null
  }


  /**
   * Model Foodlists
   */

  export type AggregateFoodlists = {
    _count: FoodlistsCountAggregateOutputType | null
    _avg: FoodlistsAvgAggregateOutputType | null
    _sum: FoodlistsSumAggregateOutputType | null
    _min: FoodlistsMinAggregateOutputType | null
    _max: FoodlistsMaxAggregateOutputType | null
  }

  export type FoodlistsAvgAggregateOutputType = {
    id: number | null
  }

  export type FoodlistsSumAggregateOutputType = {
    id: number | null
  }

  export type FoodlistsMinAggregateOutputType = {
    id: number | null
    food_list_id: string | null
    food_name: string | null
    rating: string | null
    product_image: string | null
    descriptions: string | null
    restaurant_details_id: string | null
  }

  export type FoodlistsMaxAggregateOutputType = {
    id: number | null
    food_list_id: string | null
    food_name: string | null
    rating: string | null
    product_image: string | null
    descriptions: string | null
    restaurant_details_id: string | null
  }

  export type FoodlistsCountAggregateOutputType = {
    id: number
    food_list_id: number
    food_name: number
    rating: number
    product_image: number
    descriptions: number
    restaurant_details_id: number
    _all: number
  }


  export type FoodlistsAvgAggregateInputType = {
    id?: true
  }

  export type FoodlistsSumAggregateInputType = {
    id?: true
  }

  export type FoodlistsMinAggregateInputType = {
    id?: true
    food_list_id?: true
    food_name?: true
    rating?: true
    product_image?: true
    descriptions?: true
    restaurant_details_id?: true
  }

  export type FoodlistsMaxAggregateInputType = {
    id?: true
    food_list_id?: true
    food_name?: true
    rating?: true
    product_image?: true
    descriptions?: true
    restaurant_details_id?: true
  }

  export type FoodlistsCountAggregateInputType = {
    id?: true
    food_list_id?: true
    food_name?: true
    rating?: true
    product_image?: true
    descriptions?: true
    restaurant_details_id?: true
    _all?: true
  }

  export type FoodlistsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foodlists to aggregate.
     */
    where?: FoodlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foodlists to fetch.
     */
    orderBy?: FoodlistsOrderByWithRelationInput | FoodlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foodlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foodlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foodlists
    **/
    _count?: true | FoodlistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodlistsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodlistsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodlistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodlistsMaxAggregateInputType
  }

  export type GetFoodlistsAggregateType<T extends FoodlistsAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodlists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodlists[P]>
      : GetScalarType<T[P], AggregateFoodlists[P]>
  }




  export type FoodlistsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodlistsWhereInput
    orderBy?: FoodlistsOrderByWithAggregationInput | FoodlistsOrderByWithAggregationInput[]
    by: FoodlistsScalarFieldEnum[] | FoodlistsScalarFieldEnum
    having?: FoodlistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodlistsCountAggregateInputType | true
    _avg?: FoodlistsAvgAggregateInputType
    _sum?: FoodlistsSumAggregateInputType
    _min?: FoodlistsMinAggregateInputType
    _max?: FoodlistsMaxAggregateInputType
  }

  export type FoodlistsGroupByOutputType = {
    id: number
    food_list_id: string
    food_name: string
    rating: string | null
    product_image: string
    descriptions: string
    restaurant_details_id: string
    _count: FoodlistsCountAggregateOutputType | null
    _avg: FoodlistsAvgAggregateOutputType | null
    _sum: FoodlistsSumAggregateOutputType | null
    _min: FoodlistsMinAggregateOutputType | null
    _max: FoodlistsMaxAggregateOutputType | null
  }

  type GetFoodlistsGroupByPayload<T extends FoodlistsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodlistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodlistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodlistsGroupByOutputType[P]>
            : GetScalarType<T[P], FoodlistsGroupByOutputType[P]>
        }
      >
    >


  export type FoodlistsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    food_list_id?: boolean
    food_name?: boolean
    rating?: boolean
    product_image?: boolean
    descriptions?: boolean
    restaurant_details_id?: boolean
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodlists"]>

  export type FoodlistsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    food_list_id?: boolean
    food_name?: boolean
    rating?: boolean
    product_image?: boolean
    descriptions?: boolean
    restaurant_details_id?: boolean
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodlists"]>

  export type FoodlistsSelectScalar = {
    id?: boolean
    food_list_id?: boolean
    food_name?: boolean
    rating?: boolean
    product_image?: boolean
    descriptions?: boolean
    restaurant_details_id?: boolean
  }

  export type FoodlistsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }
  export type FoodlistsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }

  export type $FoodlistsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Foodlists"
    objects: {
      restaurant_details: Prisma.$RestaurantDetailsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      food_list_id: string
      food_name: string
      rating: string | null
      product_image: string
      descriptions: string
      restaurant_details_id: string
    }, ExtArgs["result"]["foodlists"]>
    composites: {}
  }

  type FoodlistsGetPayload<S extends boolean | null | undefined | FoodlistsDefaultArgs> = $Result.GetResult<Prisma.$FoodlistsPayload, S>

  type FoodlistsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FoodlistsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FoodlistsCountAggregateInputType | true
    }

  export interface FoodlistsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Foodlists'], meta: { name: 'Foodlists' } }
    /**
     * Find zero or one Foodlists that matches the filter.
     * @param {FoodlistsFindUniqueArgs} args - Arguments to find a Foodlists
     * @example
     * // Get one Foodlists
     * const foodlists = await prisma.foodlists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoodlistsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsFindUniqueArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Foodlists that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FoodlistsFindUniqueOrThrowArgs} args - Arguments to find a Foodlists
     * @example
     * // Get one Foodlists
     * const foodlists = await prisma.foodlists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoodlistsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Foodlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsFindFirstArgs} args - Arguments to find a Foodlists
     * @example
     * // Get one Foodlists
     * const foodlists = await prisma.foodlists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoodlistsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsFindFirstArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Foodlists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsFindFirstOrThrowArgs} args - Arguments to find a Foodlists
     * @example
     * // Get one Foodlists
     * const foodlists = await prisma.foodlists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoodlistsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Foodlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foodlists
     * const foodlists = await prisma.foodlists.findMany()
     * 
     * // Get first 10 Foodlists
     * const foodlists = await prisma.foodlists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodlistsWithIdOnly = await prisma.foodlists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FoodlistsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Foodlists.
     * @param {FoodlistsCreateArgs} args - Arguments to create a Foodlists.
     * @example
     * // Create one Foodlists
     * const Foodlists = await prisma.foodlists.create({
     *   data: {
     *     // ... data to create a Foodlists
     *   }
     * })
     * 
    **/
    create<T extends FoodlistsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsCreateArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Foodlists.
     * @param {FoodlistsCreateManyArgs} args - Arguments to create many Foodlists.
     * @example
     * // Create many Foodlists
     * const foodlists = await prisma.foodlists.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends FoodlistsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Foodlists and returns the data saved in the database.
     * @param {FoodlistsCreateManyAndReturnArgs} args - Arguments to create many Foodlists.
     * @example
     * // Create many Foodlists
     * const foodlists = await prisma.foodlists.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Foodlists and only return the `id`
     * const foodlistsWithIdOnly = await prisma.foodlists.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends FoodlistsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Foodlists.
     * @param {FoodlistsDeleteArgs} args - Arguments to delete one Foodlists.
     * @example
     * // Delete one Foodlists
     * const Foodlists = await prisma.foodlists.delete({
     *   where: {
     *     // ... filter to delete one Foodlists
     *   }
     * })
     * 
    **/
    delete<T extends FoodlistsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsDeleteArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Foodlists.
     * @param {FoodlistsUpdateArgs} args - Arguments to update one Foodlists.
     * @example
     * // Update one Foodlists
     * const foodlists = await prisma.foodlists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoodlistsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsUpdateArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Foodlists.
     * @param {FoodlistsDeleteManyArgs} args - Arguments to filter Foodlists to delete.
     * @example
     * // Delete a few Foodlists
     * const { count } = await prisma.foodlists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoodlistsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FoodlistsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foodlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foodlists
     * const foodlists = await prisma.foodlists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoodlistsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Foodlists.
     * @param {FoodlistsUpsertArgs} args - Arguments to update or create a Foodlists.
     * @example
     * // Update or create a Foodlists
     * const foodlists = await prisma.foodlists.upsert({
     *   create: {
     *     // ... data to create a Foodlists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Foodlists we want to update
     *   }
     * })
    **/
    upsert<T extends FoodlistsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FoodlistsUpsertArgs<ExtArgs>>
    ): Prisma__FoodlistsClient<$Result.GetResult<Prisma.$FoodlistsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Foodlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsCountArgs} args - Arguments to filter Foodlists to count.
     * @example
     * // Count the number of Foodlists
     * const count = await prisma.foodlists.count({
     *   where: {
     *     // ... the filter for the Foodlists we want to count
     *   }
     * })
    **/
    count<T extends FoodlistsCountArgs>(
      args?: Subset<T, FoodlistsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodlistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Foodlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodlistsAggregateArgs>(args: Subset<T, FoodlistsAggregateArgs>): Prisma.PrismaPromise<GetFoodlistsAggregateType<T>>

    /**
     * Group by Foodlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodlistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodlistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodlistsGroupByArgs['orderBy'] }
        : { orderBy?: FoodlistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodlistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodlistsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Foodlists model
   */
  readonly fields: FoodlistsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Foodlists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodlistsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    restaurant_details<T extends RestaurantDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDetailsDefaultArgs<ExtArgs>>): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Foodlists model
   */ 
  interface FoodlistsFieldRefs {
    readonly id: FieldRef<"Foodlists", 'Int'>
    readonly food_list_id: FieldRef<"Foodlists", 'String'>
    readonly food_name: FieldRef<"Foodlists", 'String'>
    readonly rating: FieldRef<"Foodlists", 'String'>
    readonly product_image: FieldRef<"Foodlists", 'String'>
    readonly descriptions: FieldRef<"Foodlists", 'String'>
    readonly restaurant_details_id: FieldRef<"Foodlists", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Foodlists findUnique
   */
  export type FoodlistsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter, which Foodlists to fetch.
     */
    where: FoodlistsWhereUniqueInput
  }

  /**
   * Foodlists findUniqueOrThrow
   */
  export type FoodlistsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter, which Foodlists to fetch.
     */
    where: FoodlistsWhereUniqueInput
  }

  /**
   * Foodlists findFirst
   */
  export type FoodlistsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter, which Foodlists to fetch.
     */
    where?: FoodlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foodlists to fetch.
     */
    orderBy?: FoodlistsOrderByWithRelationInput | FoodlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foodlists.
     */
    cursor?: FoodlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foodlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foodlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foodlists.
     */
    distinct?: FoodlistsScalarFieldEnum | FoodlistsScalarFieldEnum[]
  }

  /**
   * Foodlists findFirstOrThrow
   */
  export type FoodlistsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter, which Foodlists to fetch.
     */
    where?: FoodlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foodlists to fetch.
     */
    orderBy?: FoodlistsOrderByWithRelationInput | FoodlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foodlists.
     */
    cursor?: FoodlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foodlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foodlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foodlists.
     */
    distinct?: FoodlistsScalarFieldEnum | FoodlistsScalarFieldEnum[]
  }

  /**
   * Foodlists findMany
   */
  export type FoodlistsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter, which Foodlists to fetch.
     */
    where?: FoodlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foodlists to fetch.
     */
    orderBy?: FoodlistsOrderByWithRelationInput | FoodlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foodlists.
     */
    cursor?: FoodlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foodlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foodlists.
     */
    skip?: number
    distinct?: FoodlistsScalarFieldEnum | FoodlistsScalarFieldEnum[]
  }

  /**
   * Foodlists create
   */
  export type FoodlistsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * The data needed to create a Foodlists.
     */
    data: XOR<FoodlistsCreateInput, FoodlistsUncheckedCreateInput>
  }

  /**
   * Foodlists createMany
   */
  export type FoodlistsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foodlists.
     */
    data: FoodlistsCreateManyInput | FoodlistsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Foodlists createManyAndReturn
   */
  export type FoodlistsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Foodlists.
     */
    data: FoodlistsCreateManyInput | FoodlistsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Foodlists update
   */
  export type FoodlistsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * The data needed to update a Foodlists.
     */
    data: XOR<FoodlistsUpdateInput, FoodlistsUncheckedUpdateInput>
    /**
     * Choose, which Foodlists to update.
     */
    where: FoodlistsWhereUniqueInput
  }

  /**
   * Foodlists updateMany
   */
  export type FoodlistsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foodlists.
     */
    data: XOR<FoodlistsUpdateManyMutationInput, FoodlistsUncheckedUpdateManyInput>
    /**
     * Filter which Foodlists to update
     */
    where?: FoodlistsWhereInput
  }

  /**
   * Foodlists upsert
   */
  export type FoodlistsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * The filter to search for the Foodlists to update in case it exists.
     */
    where: FoodlistsWhereUniqueInput
    /**
     * In case the Foodlists found by the `where` argument doesn't exist, create a new Foodlists with this data.
     */
    create: XOR<FoodlistsCreateInput, FoodlistsUncheckedCreateInput>
    /**
     * In case the Foodlists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodlistsUpdateInput, FoodlistsUncheckedUpdateInput>
  }

  /**
   * Foodlists delete
   */
  export type FoodlistsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
    /**
     * Filter which Foodlists to delete.
     */
    where: FoodlistsWhereUniqueInput
  }

  /**
   * Foodlists deleteMany
   */
  export type FoodlistsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foodlists to delete
     */
    where?: FoodlistsWhereInput
  }

  /**
   * Foodlists without action
   */
  export type FoodlistsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foodlists
     */
    select?: FoodlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodlistsInclude<ExtArgs> | null
  }


  /**
   * Model SimilarProducts
   */

  export type AggregateSimilarProducts = {
    _count: SimilarProductsCountAggregateOutputType | null
    _avg: SimilarProductsAvgAggregateOutputType | null
    _sum: SimilarProductsSumAggregateOutputType | null
    _min: SimilarProductsMinAggregateOutputType | null
    _max: SimilarProductsMaxAggregateOutputType | null
  }

  export type SimilarProductsAvgAggregateOutputType = {
    id: number | null
  }

  export type SimilarProductsSumAggregateOutputType = {
    id: number | null
  }

  export type SimilarProductsMinAggregateOutputType = {
    id: number | null
    similar_restaurants_id: string | null
    image_url: string | null
    title: string | null
    rating: string | null
    timing: string | null
    restaurant_details_id: string | null
  }

  export type SimilarProductsMaxAggregateOutputType = {
    id: number | null
    similar_restaurants_id: string | null
    image_url: string | null
    title: string | null
    rating: string | null
    timing: string | null
    restaurant_details_id: string | null
  }

  export type SimilarProductsCountAggregateOutputType = {
    id: number
    similar_restaurants_id: number
    image_url: number
    title: number
    rating: number
    timing: number
    restaurant_details_id: number
    _all: number
  }


  export type SimilarProductsAvgAggregateInputType = {
    id?: true
  }

  export type SimilarProductsSumAggregateInputType = {
    id?: true
  }

  export type SimilarProductsMinAggregateInputType = {
    id?: true
    similar_restaurants_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    restaurant_details_id?: true
  }

  export type SimilarProductsMaxAggregateInputType = {
    id?: true
    similar_restaurants_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    restaurant_details_id?: true
  }

  export type SimilarProductsCountAggregateInputType = {
    id?: true
    similar_restaurants_id?: true
    image_url?: true
    title?: true
    rating?: true
    timing?: true
    restaurant_details_id?: true
    _all?: true
  }

  export type SimilarProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SimilarProducts to aggregate.
     */
    where?: SimilarProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimilarProducts to fetch.
     */
    orderBy?: SimilarProductsOrderByWithRelationInput | SimilarProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimilarProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimilarProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimilarProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SimilarProducts
    **/
    _count?: true | SimilarProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SimilarProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SimilarProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimilarProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimilarProductsMaxAggregateInputType
  }

  export type GetSimilarProductsAggregateType<T extends SimilarProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateSimilarProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimilarProducts[P]>
      : GetScalarType<T[P], AggregateSimilarProducts[P]>
  }




  export type SimilarProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimilarProductsWhereInput
    orderBy?: SimilarProductsOrderByWithAggregationInput | SimilarProductsOrderByWithAggregationInput[]
    by: SimilarProductsScalarFieldEnum[] | SimilarProductsScalarFieldEnum
    having?: SimilarProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimilarProductsCountAggregateInputType | true
    _avg?: SimilarProductsAvgAggregateInputType
    _sum?: SimilarProductsSumAggregateInputType
    _min?: SimilarProductsMinAggregateInputType
    _max?: SimilarProductsMaxAggregateInputType
  }

  export type SimilarProductsGroupByOutputType = {
    id: number
    similar_restaurants_id: string
    image_url: string
    title: string
    rating: string
    timing: string
    restaurant_details_id: string
    _count: SimilarProductsCountAggregateOutputType | null
    _avg: SimilarProductsAvgAggregateOutputType | null
    _sum: SimilarProductsSumAggregateOutputType | null
    _min: SimilarProductsMinAggregateOutputType | null
    _max: SimilarProductsMaxAggregateOutputType | null
  }

  type GetSimilarProductsGroupByPayload<T extends SimilarProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimilarProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimilarProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimilarProductsGroupByOutputType[P]>
            : GetScalarType<T[P], SimilarProductsGroupByOutputType[P]>
        }
      >
    >


  export type SimilarProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    similar_restaurants_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    restaurant_details_id?: boolean
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["similarProducts"]>

  export type SimilarProductsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    similar_restaurants_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    restaurant_details_id?: boolean
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["similarProducts"]>

  export type SimilarProductsSelectScalar = {
    id?: boolean
    similar_restaurants_id?: boolean
    image_url?: boolean
    title?: boolean
    rating?: boolean
    timing?: boolean
    restaurant_details_id?: boolean
  }

  export type SimilarProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }
  export type SimilarProductsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurant_details?: boolean | RestaurantDetailsDefaultArgs<ExtArgs>
  }

  export type $SimilarProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SimilarProducts"
    objects: {
      restaurant_details: Prisma.$RestaurantDetailsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      similar_restaurants_id: string
      image_url: string
      title: string
      rating: string
      timing: string
      restaurant_details_id: string
    }, ExtArgs["result"]["similarProducts"]>
    composites: {}
  }

  type SimilarProductsGetPayload<S extends boolean | null | undefined | SimilarProductsDefaultArgs> = $Result.GetResult<Prisma.$SimilarProductsPayload, S>

  type SimilarProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SimilarProductsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SimilarProductsCountAggregateInputType | true
    }

  export interface SimilarProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SimilarProducts'], meta: { name: 'SimilarProducts' } }
    /**
     * Find zero or one SimilarProducts that matches the filter.
     * @param {SimilarProductsFindUniqueArgs} args - Arguments to find a SimilarProducts
     * @example
     * // Get one SimilarProducts
     * const similarProducts = await prisma.similarProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SimilarProductsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsFindUniqueArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SimilarProducts that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SimilarProductsFindUniqueOrThrowArgs} args - Arguments to find a SimilarProducts
     * @example
     * // Get one SimilarProducts
     * const similarProducts = await prisma.similarProducts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SimilarProductsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SimilarProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsFindFirstArgs} args - Arguments to find a SimilarProducts
     * @example
     * // Get one SimilarProducts
     * const similarProducts = await prisma.similarProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SimilarProductsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsFindFirstArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SimilarProducts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsFindFirstOrThrowArgs} args - Arguments to find a SimilarProducts
     * @example
     * // Get one SimilarProducts
     * const similarProducts = await prisma.similarProducts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SimilarProductsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SimilarProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SimilarProducts
     * const similarProducts = await prisma.similarProducts.findMany()
     * 
     * // Get first 10 SimilarProducts
     * const similarProducts = await prisma.similarProducts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const similarProductsWithIdOnly = await prisma.similarProducts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SimilarProductsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SimilarProducts.
     * @param {SimilarProductsCreateArgs} args - Arguments to create a SimilarProducts.
     * @example
     * // Create one SimilarProducts
     * const SimilarProducts = await prisma.similarProducts.create({
     *   data: {
     *     // ... data to create a SimilarProducts
     *   }
     * })
     * 
    **/
    create<T extends SimilarProductsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsCreateArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SimilarProducts.
     * @param {SimilarProductsCreateManyArgs} args - Arguments to create many SimilarProducts.
     * @example
     * // Create many SimilarProducts
     * const similarProducts = await prisma.similarProducts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SimilarProductsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SimilarProducts and returns the data saved in the database.
     * @param {SimilarProductsCreateManyAndReturnArgs} args - Arguments to create many SimilarProducts.
     * @example
     * // Create many SimilarProducts
     * const similarProducts = await prisma.similarProducts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SimilarProducts and only return the `id`
     * const similarProductsWithIdOnly = await prisma.similarProducts.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends SimilarProductsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a SimilarProducts.
     * @param {SimilarProductsDeleteArgs} args - Arguments to delete one SimilarProducts.
     * @example
     * // Delete one SimilarProducts
     * const SimilarProducts = await prisma.similarProducts.delete({
     *   where: {
     *     // ... filter to delete one SimilarProducts
     *   }
     * })
     * 
    **/
    delete<T extends SimilarProductsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsDeleteArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SimilarProducts.
     * @param {SimilarProductsUpdateArgs} args - Arguments to update one SimilarProducts.
     * @example
     * // Update one SimilarProducts
     * const similarProducts = await prisma.similarProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SimilarProductsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsUpdateArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SimilarProducts.
     * @param {SimilarProductsDeleteManyArgs} args - Arguments to filter SimilarProducts to delete.
     * @example
     * // Delete a few SimilarProducts
     * const { count } = await prisma.similarProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SimilarProductsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarProductsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SimilarProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SimilarProducts
     * const similarProducts = await prisma.similarProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SimilarProductsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SimilarProducts.
     * @param {SimilarProductsUpsertArgs} args - Arguments to update or create a SimilarProducts.
     * @example
     * // Update or create a SimilarProducts
     * const similarProducts = await prisma.similarProducts.upsert({
     *   create: {
     *     // ... data to create a SimilarProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SimilarProducts we want to update
     *   }
     * })
    **/
    upsert<T extends SimilarProductsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarProductsUpsertArgs<ExtArgs>>
    ): Prisma__SimilarProductsClient<$Result.GetResult<Prisma.$SimilarProductsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SimilarProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsCountArgs} args - Arguments to filter SimilarProducts to count.
     * @example
     * // Count the number of SimilarProducts
     * const count = await prisma.similarProducts.count({
     *   where: {
     *     // ... the filter for the SimilarProducts we want to count
     *   }
     * })
    **/
    count<T extends SimilarProductsCountArgs>(
      args?: Subset<T, SimilarProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimilarProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SimilarProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimilarProductsAggregateArgs>(args: Subset<T, SimilarProductsAggregateArgs>): Prisma.PrismaPromise<GetSimilarProductsAggregateType<T>>

    /**
     * Group by SimilarProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimilarProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimilarProductsGroupByArgs['orderBy'] }
        : { orderBy?: SimilarProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimilarProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimilarProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SimilarProducts model
   */
  readonly fields: SimilarProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SimilarProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimilarProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    restaurant_details<T extends RestaurantDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantDetailsDefaultArgs<ExtArgs>>): Prisma__RestaurantDetailsClient<$Result.GetResult<Prisma.$RestaurantDetailsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SimilarProducts model
   */ 
  interface SimilarProductsFieldRefs {
    readonly id: FieldRef<"SimilarProducts", 'Int'>
    readonly similar_restaurants_id: FieldRef<"SimilarProducts", 'String'>
    readonly image_url: FieldRef<"SimilarProducts", 'String'>
    readonly title: FieldRef<"SimilarProducts", 'String'>
    readonly rating: FieldRef<"SimilarProducts", 'String'>
    readonly timing: FieldRef<"SimilarProducts", 'String'>
    readonly restaurant_details_id: FieldRef<"SimilarProducts", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SimilarProducts findUnique
   */
  export type SimilarProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter, which SimilarProducts to fetch.
     */
    where: SimilarProductsWhereUniqueInput
  }

  /**
   * SimilarProducts findUniqueOrThrow
   */
  export type SimilarProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter, which SimilarProducts to fetch.
     */
    where: SimilarProductsWhereUniqueInput
  }

  /**
   * SimilarProducts findFirst
   */
  export type SimilarProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter, which SimilarProducts to fetch.
     */
    where?: SimilarProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimilarProducts to fetch.
     */
    orderBy?: SimilarProductsOrderByWithRelationInput | SimilarProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SimilarProducts.
     */
    cursor?: SimilarProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimilarProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimilarProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SimilarProducts.
     */
    distinct?: SimilarProductsScalarFieldEnum | SimilarProductsScalarFieldEnum[]
  }

  /**
   * SimilarProducts findFirstOrThrow
   */
  export type SimilarProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter, which SimilarProducts to fetch.
     */
    where?: SimilarProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimilarProducts to fetch.
     */
    orderBy?: SimilarProductsOrderByWithRelationInput | SimilarProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SimilarProducts.
     */
    cursor?: SimilarProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimilarProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimilarProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SimilarProducts.
     */
    distinct?: SimilarProductsScalarFieldEnum | SimilarProductsScalarFieldEnum[]
  }

  /**
   * SimilarProducts findMany
   */
  export type SimilarProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter, which SimilarProducts to fetch.
     */
    where?: SimilarProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SimilarProducts to fetch.
     */
    orderBy?: SimilarProductsOrderByWithRelationInput | SimilarProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SimilarProducts.
     */
    cursor?: SimilarProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SimilarProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SimilarProducts.
     */
    skip?: number
    distinct?: SimilarProductsScalarFieldEnum | SimilarProductsScalarFieldEnum[]
  }

  /**
   * SimilarProducts create
   */
  export type SimilarProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a SimilarProducts.
     */
    data: XOR<SimilarProductsCreateInput, SimilarProductsUncheckedCreateInput>
  }

  /**
   * SimilarProducts createMany
   */
  export type SimilarProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SimilarProducts.
     */
    data: SimilarProductsCreateManyInput | SimilarProductsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SimilarProducts createManyAndReturn
   */
  export type SimilarProductsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SimilarProducts.
     */
    data: SimilarProductsCreateManyInput | SimilarProductsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SimilarProducts update
   */
  export type SimilarProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a SimilarProducts.
     */
    data: XOR<SimilarProductsUpdateInput, SimilarProductsUncheckedUpdateInput>
    /**
     * Choose, which SimilarProducts to update.
     */
    where: SimilarProductsWhereUniqueInput
  }

  /**
   * SimilarProducts updateMany
   */
  export type SimilarProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SimilarProducts.
     */
    data: XOR<SimilarProductsUpdateManyMutationInput, SimilarProductsUncheckedUpdateManyInput>
    /**
     * Filter which SimilarProducts to update
     */
    where?: SimilarProductsWhereInput
  }

  /**
   * SimilarProducts upsert
   */
  export type SimilarProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the SimilarProducts to update in case it exists.
     */
    where: SimilarProductsWhereUniqueInput
    /**
     * In case the SimilarProducts found by the `where` argument doesn't exist, create a new SimilarProducts with this data.
     */
    create: XOR<SimilarProductsCreateInput, SimilarProductsUncheckedCreateInput>
    /**
     * In case the SimilarProducts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimilarProductsUpdateInput, SimilarProductsUncheckedUpdateInput>
  }

  /**
   * SimilarProducts delete
   */
  export type SimilarProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
    /**
     * Filter which SimilarProducts to delete.
     */
    where: SimilarProductsWhereUniqueInput
  }

  /**
   * SimilarProducts deleteMany
   */
  export type SimilarProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SimilarProducts to delete
     */
    where?: SimilarProductsWhereInput
  }

  /**
   * SimilarProducts without action
   */
  export type SimilarProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SimilarProducts
     */
    select?: SimilarProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarProductsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RestaurantScalarFieldEnum: {
    id: 'id',
    restaurant_id: 'restaurant_id',
    image_url: 'image_url',
    title: 'title',
    rating: 'rating',
    timing: 'timing',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RestaurantScalarFieldEnum = (typeof RestaurantScalarFieldEnum)[keyof typeof RestaurantScalarFieldEnum]


  export const RestaurantDetailsScalarFieldEnum: {
    id: 'id',
    restaurant_details_id: 'restaurant_details_id',
    title: 'title',
    rating: 'rating',
    price: 'price',
    location: 'location',
    timing: 'timing',
    restaurant_text: 'restaurant_text',
    restaurant_id: 'restaurant_id'
  };

  export type RestaurantDetailsScalarFieldEnum = (typeof RestaurantDetailsScalarFieldEnum)[keyof typeof RestaurantDetailsScalarFieldEnum]


  export const FoodlistsScalarFieldEnum: {
    id: 'id',
    food_list_id: 'food_list_id',
    food_name: 'food_name',
    rating: 'rating',
    product_image: 'product_image',
    descriptions: 'descriptions',
    restaurant_details_id: 'restaurant_details_id'
  };

  export type FoodlistsScalarFieldEnum = (typeof FoodlistsScalarFieldEnum)[keyof typeof FoodlistsScalarFieldEnum]


  export const SimilarProductsScalarFieldEnum: {
    id: 'id',
    similar_restaurants_id: 'similar_restaurants_id',
    image_url: 'image_url',
    title: 'title',
    rating: 'rating',
    timing: 'timing',
    restaurant_details_id: 'restaurant_details_id'
  };

  export type SimilarProductsScalarFieldEnum = (typeof SimilarProductsScalarFieldEnum)[keyof typeof SimilarProductsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RestaurantWhereInput = {
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    id?: IntFilter<"Restaurant"> | number
    restaurant_id?: StringFilter<"Restaurant"> | string
    image_url?: StringFilter<"Restaurant"> | string
    title?: StringFilter<"Restaurant"> | string
    rating?: StringFilter<"Restaurant"> | string
    timing?: StringFilter<"Restaurant"> | string
    location?: StringFilter<"Restaurant"> | string
    createdAt?: DateTimeFilter<"Restaurant"> | Date | string
    updatedAt?: DateTimeFilter<"Restaurant"> | Date | string
    restaurant_details?: XOR<RestaurantDetailsNullableRelationFilter, RestaurantDetailsWhereInput> | null
  }

  export type RestaurantOrderByWithRelationInput = {
    id?: SortOrder
    restaurant_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    restaurant_details?: RestaurantDetailsOrderByWithRelationInput
  }

  export type RestaurantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    restaurant_id?: string
    AND?: RestaurantWhereInput | RestaurantWhereInput[]
    OR?: RestaurantWhereInput[]
    NOT?: RestaurantWhereInput | RestaurantWhereInput[]
    image_url?: StringFilter<"Restaurant"> | string
    title?: StringFilter<"Restaurant"> | string
    rating?: StringFilter<"Restaurant"> | string
    timing?: StringFilter<"Restaurant"> | string
    location?: StringFilter<"Restaurant"> | string
    createdAt?: DateTimeFilter<"Restaurant"> | Date | string
    updatedAt?: DateTimeFilter<"Restaurant"> | Date | string
    restaurant_details?: XOR<RestaurantDetailsNullableRelationFilter, RestaurantDetailsWhereInput> | null
  }, "id" | "restaurant_id">

  export type RestaurantOrderByWithAggregationInput = {
    id?: SortOrder
    restaurant_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RestaurantCountOrderByAggregateInput
    _avg?: RestaurantAvgOrderByAggregateInput
    _max?: RestaurantMaxOrderByAggregateInput
    _min?: RestaurantMinOrderByAggregateInput
    _sum?: RestaurantSumOrderByAggregateInput
  }

  export type RestaurantScalarWhereWithAggregatesInput = {
    AND?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    OR?: RestaurantScalarWhereWithAggregatesInput[]
    NOT?: RestaurantScalarWhereWithAggregatesInput | RestaurantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Restaurant"> | number
    restaurant_id?: StringWithAggregatesFilter<"Restaurant"> | string
    image_url?: StringWithAggregatesFilter<"Restaurant"> | string
    title?: StringWithAggregatesFilter<"Restaurant"> | string
    rating?: StringWithAggregatesFilter<"Restaurant"> | string
    timing?: StringWithAggregatesFilter<"Restaurant"> | string
    location?: StringWithAggregatesFilter<"Restaurant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Restaurant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Restaurant"> | Date | string
  }

  export type RestaurantDetailsWhereInput = {
    AND?: RestaurantDetailsWhereInput | RestaurantDetailsWhereInput[]
    OR?: RestaurantDetailsWhereInput[]
    NOT?: RestaurantDetailsWhereInput | RestaurantDetailsWhereInput[]
    id?: IntFilter<"RestaurantDetails"> | number
    restaurant_details_id?: StringFilter<"RestaurantDetails"> | string
    title?: StringFilter<"RestaurantDetails"> | string
    rating?: StringFilter<"RestaurantDetails"> | string
    price?: StringFilter<"RestaurantDetails"> | string
    location?: StringFilter<"RestaurantDetails"> | string
    timing?: StringFilter<"RestaurantDetails"> | string
    restaurant_text?: StringFilter<"RestaurantDetails"> | string
    restaurant_id?: StringFilter<"RestaurantDetails"> | string
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    food_list?: FoodlistsListRelationFilter
    similar_product?: SimilarProductsListRelationFilter
  }

  export type RestaurantDetailsOrderByWithRelationInput = {
    id?: SortOrder
    restaurant_details_id?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    location?: SortOrder
    timing?: SortOrder
    restaurant_text?: SortOrder
    restaurant_id?: SortOrder
    restaurant?: RestaurantOrderByWithRelationInput
    food_list?: FoodlistsOrderByRelationAggregateInput
    similar_product?: SimilarProductsOrderByRelationAggregateInput
  }

  export type RestaurantDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    restaurant_details_id?: string
    restaurant_id?: string
    AND?: RestaurantDetailsWhereInput | RestaurantDetailsWhereInput[]
    OR?: RestaurantDetailsWhereInput[]
    NOT?: RestaurantDetailsWhereInput | RestaurantDetailsWhereInput[]
    title?: StringFilter<"RestaurantDetails"> | string
    rating?: StringFilter<"RestaurantDetails"> | string
    price?: StringFilter<"RestaurantDetails"> | string
    location?: StringFilter<"RestaurantDetails"> | string
    timing?: StringFilter<"RestaurantDetails"> | string
    restaurant_text?: StringFilter<"RestaurantDetails"> | string
    restaurant?: XOR<RestaurantRelationFilter, RestaurantWhereInput>
    food_list?: FoodlistsListRelationFilter
    similar_product?: SimilarProductsListRelationFilter
  }, "id" | "restaurant_details_id" | "restaurant_id">

  export type RestaurantDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    restaurant_details_id?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    location?: SortOrder
    timing?: SortOrder
    restaurant_text?: SortOrder
    restaurant_id?: SortOrder
    _count?: RestaurantDetailsCountOrderByAggregateInput
    _avg?: RestaurantDetailsAvgOrderByAggregateInput
    _max?: RestaurantDetailsMaxOrderByAggregateInput
    _min?: RestaurantDetailsMinOrderByAggregateInput
    _sum?: RestaurantDetailsSumOrderByAggregateInput
  }

  export type RestaurantDetailsScalarWhereWithAggregatesInput = {
    AND?: RestaurantDetailsScalarWhereWithAggregatesInput | RestaurantDetailsScalarWhereWithAggregatesInput[]
    OR?: RestaurantDetailsScalarWhereWithAggregatesInput[]
    NOT?: RestaurantDetailsScalarWhereWithAggregatesInput | RestaurantDetailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RestaurantDetails"> | number
    restaurant_details_id?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    title?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    rating?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    price?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    location?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    timing?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    restaurant_text?: StringWithAggregatesFilter<"RestaurantDetails"> | string
    restaurant_id?: StringWithAggregatesFilter<"RestaurantDetails"> | string
  }

  export type FoodlistsWhereInput = {
    AND?: FoodlistsWhereInput | FoodlistsWhereInput[]
    OR?: FoodlistsWhereInput[]
    NOT?: FoodlistsWhereInput | FoodlistsWhereInput[]
    id?: IntFilter<"Foodlists"> | number
    food_list_id?: StringFilter<"Foodlists"> | string
    food_name?: StringFilter<"Foodlists"> | string
    rating?: StringNullableFilter<"Foodlists"> | string | null
    product_image?: StringFilter<"Foodlists"> | string
    descriptions?: StringFilter<"Foodlists"> | string
    restaurant_details_id?: StringFilter<"Foodlists"> | string
    restaurant_details?: XOR<RestaurantDetailsRelationFilter, RestaurantDetailsWhereInput>
  }

  export type FoodlistsOrderByWithRelationInput = {
    id?: SortOrder
    food_list_id?: SortOrder
    food_name?: SortOrder
    rating?: SortOrderInput | SortOrder
    product_image?: SortOrder
    descriptions?: SortOrder
    restaurant_details_id?: SortOrder
    restaurant_details?: RestaurantDetailsOrderByWithRelationInput
  }

  export type FoodlistsWhereUniqueInput = Prisma.AtLeast<{
    food_list_id?: string
    AND?: FoodlistsWhereInput | FoodlistsWhereInput[]
    OR?: FoodlistsWhereInput[]
    NOT?: FoodlistsWhereInput | FoodlistsWhereInput[]
    id?: IntFilter<"Foodlists"> | number
    food_name?: StringFilter<"Foodlists"> | string
    rating?: StringNullableFilter<"Foodlists"> | string | null
    product_image?: StringFilter<"Foodlists"> | string
    descriptions?: StringFilter<"Foodlists"> | string
    restaurant_details_id?: StringFilter<"Foodlists"> | string
    restaurant_details?: XOR<RestaurantDetailsRelationFilter, RestaurantDetailsWhereInput>
  }, "food_list_id" | "food_list_id">

  export type FoodlistsOrderByWithAggregationInput = {
    id?: SortOrder
    food_list_id?: SortOrder
    food_name?: SortOrder
    rating?: SortOrderInput | SortOrder
    product_image?: SortOrder
    descriptions?: SortOrder
    restaurant_details_id?: SortOrder
    _count?: FoodlistsCountOrderByAggregateInput
    _avg?: FoodlistsAvgOrderByAggregateInput
    _max?: FoodlistsMaxOrderByAggregateInput
    _min?: FoodlistsMinOrderByAggregateInput
    _sum?: FoodlistsSumOrderByAggregateInput
  }

  export type FoodlistsScalarWhereWithAggregatesInput = {
    AND?: FoodlistsScalarWhereWithAggregatesInput | FoodlistsScalarWhereWithAggregatesInput[]
    OR?: FoodlistsScalarWhereWithAggregatesInput[]
    NOT?: FoodlistsScalarWhereWithAggregatesInput | FoodlistsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Foodlists"> | number
    food_list_id?: StringWithAggregatesFilter<"Foodlists"> | string
    food_name?: StringWithAggregatesFilter<"Foodlists"> | string
    rating?: StringNullableWithAggregatesFilter<"Foodlists"> | string | null
    product_image?: StringWithAggregatesFilter<"Foodlists"> | string
    descriptions?: StringWithAggregatesFilter<"Foodlists"> | string
    restaurant_details_id?: StringWithAggregatesFilter<"Foodlists"> | string
  }

  export type SimilarProductsWhereInput = {
    AND?: SimilarProductsWhereInput | SimilarProductsWhereInput[]
    OR?: SimilarProductsWhereInput[]
    NOT?: SimilarProductsWhereInput | SimilarProductsWhereInput[]
    id?: IntFilter<"SimilarProducts"> | number
    similar_restaurants_id?: StringFilter<"SimilarProducts"> | string
    image_url?: StringFilter<"SimilarProducts"> | string
    title?: StringFilter<"SimilarProducts"> | string
    rating?: StringFilter<"SimilarProducts"> | string
    timing?: StringFilter<"SimilarProducts"> | string
    restaurant_details_id?: StringFilter<"SimilarProducts"> | string
    restaurant_details?: XOR<RestaurantDetailsRelationFilter, RestaurantDetailsWhereInput>
  }

  export type SimilarProductsOrderByWithRelationInput = {
    id?: SortOrder
    similar_restaurants_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    restaurant_details_id?: SortOrder
    restaurant_details?: RestaurantDetailsOrderByWithRelationInput
  }

  export type SimilarProductsWhereUniqueInput = Prisma.AtLeast<{
    similar_restaurants_id?: string
    AND?: SimilarProductsWhereInput | SimilarProductsWhereInput[]
    OR?: SimilarProductsWhereInput[]
    NOT?: SimilarProductsWhereInput | SimilarProductsWhereInput[]
    id?: IntFilter<"SimilarProducts"> | number
    image_url?: StringFilter<"SimilarProducts"> | string
    title?: StringFilter<"SimilarProducts"> | string
    rating?: StringFilter<"SimilarProducts"> | string
    timing?: StringFilter<"SimilarProducts"> | string
    restaurant_details_id?: StringFilter<"SimilarProducts"> | string
    restaurant_details?: XOR<RestaurantDetailsRelationFilter, RestaurantDetailsWhereInput>
  }, "similar_restaurants_id" | "similar_restaurants_id">

  export type SimilarProductsOrderByWithAggregationInput = {
    id?: SortOrder
    similar_restaurants_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    restaurant_details_id?: SortOrder
    _count?: SimilarProductsCountOrderByAggregateInput
    _avg?: SimilarProductsAvgOrderByAggregateInput
    _max?: SimilarProductsMaxOrderByAggregateInput
    _min?: SimilarProductsMinOrderByAggregateInput
    _sum?: SimilarProductsSumOrderByAggregateInput
  }

  export type SimilarProductsScalarWhereWithAggregatesInput = {
    AND?: SimilarProductsScalarWhereWithAggregatesInput | SimilarProductsScalarWhereWithAggregatesInput[]
    OR?: SimilarProductsScalarWhereWithAggregatesInput[]
    NOT?: SimilarProductsScalarWhereWithAggregatesInput | SimilarProductsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SimilarProducts"> | number
    similar_restaurants_id?: StringWithAggregatesFilter<"SimilarProducts"> | string
    image_url?: StringWithAggregatesFilter<"SimilarProducts"> | string
    title?: StringWithAggregatesFilter<"SimilarProducts"> | string
    rating?: StringWithAggregatesFilter<"SimilarProducts"> | string
    timing?: StringWithAggregatesFilter<"SimilarProducts"> | string
    restaurant_details_id?: StringWithAggregatesFilter<"SimilarProducts"> | string
  }

  export type RestaurantCreateInput = {
    restaurant_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    restaurant_details?: RestaurantDetailsCreateNestedOneWithoutRestaurantInput
  }

  export type RestaurantUncheckedCreateInput = {
    id?: number
    restaurant_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    restaurant_details?: RestaurantDetailsUncheckedCreateNestedOneWithoutRestaurantInput
  }

  export type RestaurantUpdateInput = {
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    restaurant_details?: RestaurantDetailsUpdateOneWithoutRestaurantNestedInput
  }

  export type RestaurantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    restaurant_details?: RestaurantDetailsUncheckedUpdateOneWithoutRestaurantNestedInput
  }

  export type RestaurantCreateManyInput = {
    id?: number
    restaurant_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RestaurantUpdateManyMutationInput = {
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RestaurantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RestaurantDetailsCreateInput = {
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant: RestaurantCreateNestedOneWithoutRestaurant_detailsInput
    food_list?: FoodlistsCreateNestedManyWithoutRestaurant_detailsInput
    similar_product?: SimilarProductsCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsUncheckedCreateInput = {
    id?: number
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant_id: string
    food_list?: FoodlistsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
    similar_product?: SimilarProductsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsUpdateInput = {
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant?: RestaurantUpdateOneRequiredWithoutRestaurant_detailsNestedInput
    food_list?: FoodlistsUpdateManyWithoutRestaurant_detailsNestedInput
    similar_product?: SimilarProductsUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant_id?: StringFieldUpdateOperationsInput | string
    food_list?: FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
    similar_product?: SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsCreateManyInput = {
    id?: number
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant_id: string
  }

  export type RestaurantDetailsUpdateManyMutationInput = {
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
  }

  export type RestaurantDetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant_id?: StringFieldUpdateOperationsInput | string
  }

  export type FoodlistsCreateInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
    restaurant_details: RestaurantDetailsCreateNestedOneWithoutFood_listInput
  }

  export type FoodlistsUncheckedCreateInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
    restaurant_details_id: string
  }

  export type FoodlistsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    restaurant_details?: RestaurantDetailsUpdateOneRequiredWithoutFood_listNestedInput
  }

  export type FoodlistsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
  }

  export type FoodlistsCreateManyInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
    restaurant_details_id: string
  }

  export type FoodlistsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
  }

  export type FoodlistsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsCreateInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    restaurant_details: RestaurantDetailsCreateNestedOneWithoutSimilar_productInput
  }

  export type SimilarProductsUncheckedCreateInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    restaurant_details_id: string
  }

  export type SimilarProductsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_details?: RestaurantDetailsUpdateOneRequiredWithoutSimilar_productNestedInput
  }

  export type SimilarProductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsCreateManyInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    restaurant_details_id: string
  }

  export type SimilarProductsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RestaurantDetailsNullableRelationFilter = {
    is?: RestaurantDetailsWhereInput | null
    isNot?: RestaurantDetailsWhereInput | null
  }

  export type RestaurantCountOrderByAggregateInput = {
    id?: SortOrder
    restaurant_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RestaurantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RestaurantMaxOrderByAggregateInput = {
    id?: SortOrder
    restaurant_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RestaurantMinOrderByAggregateInput = {
    id?: SortOrder
    restaurant_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RestaurantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RestaurantRelationFilter = {
    is?: RestaurantWhereInput
    isNot?: RestaurantWhereInput
  }

  export type FoodlistsListRelationFilter = {
    every?: FoodlistsWhereInput
    some?: FoodlistsWhereInput
    none?: FoodlistsWhereInput
  }

  export type SimilarProductsListRelationFilter = {
    every?: SimilarProductsWhereInput
    some?: SimilarProductsWhereInput
    none?: SimilarProductsWhereInput
  }

  export type FoodlistsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SimilarProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RestaurantDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    restaurant_details_id?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    location?: SortOrder
    timing?: SortOrder
    restaurant_text?: SortOrder
    restaurant_id?: SortOrder
  }

  export type RestaurantDetailsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RestaurantDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    restaurant_details_id?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    location?: SortOrder
    timing?: SortOrder
    restaurant_text?: SortOrder
    restaurant_id?: SortOrder
  }

  export type RestaurantDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    restaurant_details_id?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    location?: SortOrder
    timing?: SortOrder
    restaurant_text?: SortOrder
    restaurant_id?: SortOrder
  }

  export type RestaurantDetailsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RestaurantDetailsRelationFilter = {
    is?: RestaurantDetailsWhereInput
    isNot?: RestaurantDetailsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FoodlistsCountOrderByAggregateInput = {
    id?: SortOrder
    food_list_id?: SortOrder
    food_name?: SortOrder
    rating?: SortOrder
    product_image?: SortOrder
    descriptions?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type FoodlistsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FoodlistsMaxOrderByAggregateInput = {
    id?: SortOrder
    food_list_id?: SortOrder
    food_name?: SortOrder
    rating?: SortOrder
    product_image?: SortOrder
    descriptions?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type FoodlistsMinOrderByAggregateInput = {
    id?: SortOrder
    food_list_id?: SortOrder
    food_name?: SortOrder
    rating?: SortOrder
    product_image?: SortOrder
    descriptions?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type FoodlistsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SimilarProductsCountOrderByAggregateInput = {
    id?: SortOrder
    similar_restaurants_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type SimilarProductsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SimilarProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    similar_restaurants_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type SimilarProductsMinOrderByAggregateInput = {
    id?: SortOrder
    similar_restaurants_id?: SortOrder
    image_url?: SortOrder
    title?: SortOrder
    rating?: SortOrder
    timing?: SortOrder
    restaurant_details_id?: SortOrder
  }

  export type SimilarProductsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RestaurantDetailsCreateNestedOneWithoutRestaurantInput = {
    create?: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutRestaurantInput
    connect?: RestaurantDetailsWhereUniqueInput
  }

  export type RestaurantDetailsUncheckedCreateNestedOneWithoutRestaurantInput = {
    create?: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutRestaurantInput
    connect?: RestaurantDetailsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RestaurantDetailsUpdateOneWithoutRestaurantNestedInput = {
    create?: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutRestaurantInput
    upsert?: RestaurantDetailsUpsertWithoutRestaurantInput
    disconnect?: RestaurantDetailsWhereInput | boolean
    delete?: RestaurantDetailsWhereInput | boolean
    connect?: RestaurantDetailsWhereUniqueInput
    update?: XOR<XOR<RestaurantDetailsUpdateToOneWithWhereWithoutRestaurantInput, RestaurantDetailsUpdateWithoutRestaurantInput>, RestaurantDetailsUncheckedUpdateWithoutRestaurantInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RestaurantDetailsUncheckedUpdateOneWithoutRestaurantNestedInput = {
    create?: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutRestaurantInput
    upsert?: RestaurantDetailsUpsertWithoutRestaurantInput
    disconnect?: RestaurantDetailsWhereInput | boolean
    delete?: RestaurantDetailsWhereInput | boolean
    connect?: RestaurantDetailsWhereUniqueInput
    update?: XOR<XOR<RestaurantDetailsUpdateToOneWithWhereWithoutRestaurantInput, RestaurantDetailsUpdateWithoutRestaurantInput>, RestaurantDetailsUncheckedUpdateWithoutRestaurantInput>
  }

  export type RestaurantCreateNestedOneWithoutRestaurant_detailsInput = {
    create?: XOR<RestaurantCreateWithoutRestaurant_detailsInput, RestaurantUncheckedCreateWithoutRestaurant_detailsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutRestaurant_detailsInput
    connect?: RestaurantWhereUniqueInput
  }

  export type FoodlistsCreateNestedManyWithoutRestaurant_detailsInput = {
    create?: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput> | FoodlistsCreateWithoutRestaurant_detailsInput[] | FoodlistsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: FoodlistsCreateOrConnectWithoutRestaurant_detailsInput | FoodlistsCreateOrConnectWithoutRestaurant_detailsInput[]
    createMany?: FoodlistsCreateManyRestaurant_detailsInputEnvelope
    connect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
  }

  export type SimilarProductsCreateNestedManyWithoutRestaurant_detailsInput = {
    create?: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput> | SimilarProductsCreateWithoutRestaurant_detailsInput[] | SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput | SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput[]
    createMany?: SimilarProductsCreateManyRestaurant_detailsInputEnvelope
    connect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
  }

  export type FoodlistsUncheckedCreateNestedManyWithoutRestaurant_detailsInput = {
    create?: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput> | FoodlistsCreateWithoutRestaurant_detailsInput[] | FoodlistsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: FoodlistsCreateOrConnectWithoutRestaurant_detailsInput | FoodlistsCreateOrConnectWithoutRestaurant_detailsInput[]
    createMany?: FoodlistsCreateManyRestaurant_detailsInputEnvelope
    connect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
  }

  export type SimilarProductsUncheckedCreateNestedManyWithoutRestaurant_detailsInput = {
    create?: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput> | SimilarProductsCreateWithoutRestaurant_detailsInput[] | SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput | SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput[]
    createMany?: SimilarProductsCreateManyRestaurant_detailsInputEnvelope
    connect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
  }

  export type RestaurantUpdateOneRequiredWithoutRestaurant_detailsNestedInput = {
    create?: XOR<RestaurantCreateWithoutRestaurant_detailsInput, RestaurantUncheckedCreateWithoutRestaurant_detailsInput>
    connectOrCreate?: RestaurantCreateOrConnectWithoutRestaurant_detailsInput
    upsert?: RestaurantUpsertWithoutRestaurant_detailsInput
    connect?: RestaurantWhereUniqueInput
    update?: XOR<XOR<RestaurantUpdateToOneWithWhereWithoutRestaurant_detailsInput, RestaurantUpdateWithoutRestaurant_detailsInput>, RestaurantUncheckedUpdateWithoutRestaurant_detailsInput>
  }

  export type FoodlistsUpdateManyWithoutRestaurant_detailsNestedInput = {
    create?: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput> | FoodlistsCreateWithoutRestaurant_detailsInput[] | FoodlistsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: FoodlistsCreateOrConnectWithoutRestaurant_detailsInput | FoodlistsCreateOrConnectWithoutRestaurant_detailsInput[]
    upsert?: FoodlistsUpsertWithWhereUniqueWithoutRestaurant_detailsInput | FoodlistsUpsertWithWhereUniqueWithoutRestaurant_detailsInput[]
    createMany?: FoodlistsCreateManyRestaurant_detailsInputEnvelope
    set?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    disconnect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    delete?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    connect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    update?: FoodlistsUpdateWithWhereUniqueWithoutRestaurant_detailsInput | FoodlistsUpdateWithWhereUniqueWithoutRestaurant_detailsInput[]
    updateMany?: FoodlistsUpdateManyWithWhereWithoutRestaurant_detailsInput | FoodlistsUpdateManyWithWhereWithoutRestaurant_detailsInput[]
    deleteMany?: FoodlistsScalarWhereInput | FoodlistsScalarWhereInput[]
  }

  export type SimilarProductsUpdateManyWithoutRestaurant_detailsNestedInput = {
    create?: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput> | SimilarProductsCreateWithoutRestaurant_detailsInput[] | SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput | SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput[]
    upsert?: SimilarProductsUpsertWithWhereUniqueWithoutRestaurant_detailsInput | SimilarProductsUpsertWithWhereUniqueWithoutRestaurant_detailsInput[]
    createMany?: SimilarProductsCreateManyRestaurant_detailsInputEnvelope
    set?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    disconnect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    delete?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    connect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    update?: SimilarProductsUpdateWithWhereUniqueWithoutRestaurant_detailsInput | SimilarProductsUpdateWithWhereUniqueWithoutRestaurant_detailsInput[]
    updateMany?: SimilarProductsUpdateManyWithWhereWithoutRestaurant_detailsInput | SimilarProductsUpdateManyWithWhereWithoutRestaurant_detailsInput[]
    deleteMany?: SimilarProductsScalarWhereInput | SimilarProductsScalarWhereInput[]
  }

  export type FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput = {
    create?: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput> | FoodlistsCreateWithoutRestaurant_detailsInput[] | FoodlistsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: FoodlistsCreateOrConnectWithoutRestaurant_detailsInput | FoodlistsCreateOrConnectWithoutRestaurant_detailsInput[]
    upsert?: FoodlistsUpsertWithWhereUniqueWithoutRestaurant_detailsInput | FoodlistsUpsertWithWhereUniqueWithoutRestaurant_detailsInput[]
    createMany?: FoodlistsCreateManyRestaurant_detailsInputEnvelope
    set?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    disconnect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    delete?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    connect?: FoodlistsWhereUniqueInput | FoodlistsWhereUniqueInput[]
    update?: FoodlistsUpdateWithWhereUniqueWithoutRestaurant_detailsInput | FoodlistsUpdateWithWhereUniqueWithoutRestaurant_detailsInput[]
    updateMany?: FoodlistsUpdateManyWithWhereWithoutRestaurant_detailsInput | FoodlistsUpdateManyWithWhereWithoutRestaurant_detailsInput[]
    deleteMany?: FoodlistsScalarWhereInput | FoodlistsScalarWhereInput[]
  }

  export type SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput = {
    create?: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput> | SimilarProductsCreateWithoutRestaurant_detailsInput[] | SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput[]
    connectOrCreate?: SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput | SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput[]
    upsert?: SimilarProductsUpsertWithWhereUniqueWithoutRestaurant_detailsInput | SimilarProductsUpsertWithWhereUniqueWithoutRestaurant_detailsInput[]
    createMany?: SimilarProductsCreateManyRestaurant_detailsInputEnvelope
    set?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    disconnect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    delete?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    connect?: SimilarProductsWhereUniqueInput | SimilarProductsWhereUniqueInput[]
    update?: SimilarProductsUpdateWithWhereUniqueWithoutRestaurant_detailsInput | SimilarProductsUpdateWithWhereUniqueWithoutRestaurant_detailsInput[]
    updateMany?: SimilarProductsUpdateManyWithWhereWithoutRestaurant_detailsInput | SimilarProductsUpdateManyWithWhereWithoutRestaurant_detailsInput[]
    deleteMany?: SimilarProductsScalarWhereInput | SimilarProductsScalarWhereInput[]
  }

  export type RestaurantDetailsCreateNestedOneWithoutFood_listInput = {
    create?: XOR<RestaurantDetailsCreateWithoutFood_listInput, RestaurantDetailsUncheckedCreateWithoutFood_listInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutFood_listInput
    connect?: RestaurantDetailsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RestaurantDetailsUpdateOneRequiredWithoutFood_listNestedInput = {
    create?: XOR<RestaurantDetailsCreateWithoutFood_listInput, RestaurantDetailsUncheckedCreateWithoutFood_listInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutFood_listInput
    upsert?: RestaurantDetailsUpsertWithoutFood_listInput
    connect?: RestaurantDetailsWhereUniqueInput
    update?: XOR<XOR<RestaurantDetailsUpdateToOneWithWhereWithoutFood_listInput, RestaurantDetailsUpdateWithoutFood_listInput>, RestaurantDetailsUncheckedUpdateWithoutFood_listInput>
  }

  export type RestaurantDetailsCreateNestedOneWithoutSimilar_productInput = {
    create?: XOR<RestaurantDetailsCreateWithoutSimilar_productInput, RestaurantDetailsUncheckedCreateWithoutSimilar_productInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutSimilar_productInput
    connect?: RestaurantDetailsWhereUniqueInput
  }

  export type RestaurantDetailsUpdateOneRequiredWithoutSimilar_productNestedInput = {
    create?: XOR<RestaurantDetailsCreateWithoutSimilar_productInput, RestaurantDetailsUncheckedCreateWithoutSimilar_productInput>
    connectOrCreate?: RestaurantDetailsCreateOrConnectWithoutSimilar_productInput
    upsert?: RestaurantDetailsUpsertWithoutSimilar_productInput
    connect?: RestaurantDetailsWhereUniqueInput
    update?: XOR<XOR<RestaurantDetailsUpdateToOneWithWhereWithoutSimilar_productInput, RestaurantDetailsUpdateWithoutSimilar_productInput>, RestaurantDetailsUncheckedUpdateWithoutSimilar_productInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RestaurantDetailsCreateWithoutRestaurantInput = {
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    food_list?: FoodlistsCreateNestedManyWithoutRestaurant_detailsInput
    similar_product?: SimilarProductsCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsUncheckedCreateWithoutRestaurantInput = {
    id?: number
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    food_list?: FoodlistsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
    similar_product?: SimilarProductsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsCreateOrConnectWithoutRestaurantInput = {
    where: RestaurantDetailsWhereUniqueInput
    create: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
  }

  export type RestaurantDetailsUpsertWithoutRestaurantInput = {
    update: XOR<RestaurantDetailsUpdateWithoutRestaurantInput, RestaurantDetailsUncheckedUpdateWithoutRestaurantInput>
    create: XOR<RestaurantDetailsCreateWithoutRestaurantInput, RestaurantDetailsUncheckedCreateWithoutRestaurantInput>
    where?: RestaurantDetailsWhereInput
  }

  export type RestaurantDetailsUpdateToOneWithWhereWithoutRestaurantInput = {
    where?: RestaurantDetailsWhereInput
    data: XOR<RestaurantDetailsUpdateWithoutRestaurantInput, RestaurantDetailsUncheckedUpdateWithoutRestaurantInput>
  }

  export type RestaurantDetailsUpdateWithoutRestaurantInput = {
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    food_list?: FoodlistsUpdateManyWithoutRestaurant_detailsNestedInput
    similar_product?: SimilarProductsUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsUncheckedUpdateWithoutRestaurantInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    food_list?: FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
    similar_product?: SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantCreateWithoutRestaurant_detailsInput = {
    restaurant_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RestaurantUncheckedCreateWithoutRestaurant_detailsInput = {
    id?: number
    restaurant_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RestaurantCreateOrConnectWithoutRestaurant_detailsInput = {
    where: RestaurantWhereUniqueInput
    create: XOR<RestaurantCreateWithoutRestaurant_detailsInput, RestaurantUncheckedCreateWithoutRestaurant_detailsInput>
  }

  export type FoodlistsCreateWithoutRestaurant_detailsInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
  }

  export type FoodlistsUncheckedCreateWithoutRestaurant_detailsInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
  }

  export type FoodlistsCreateOrConnectWithoutRestaurant_detailsInput = {
    where: FoodlistsWhereUniqueInput
    create: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput>
  }

  export type FoodlistsCreateManyRestaurant_detailsInputEnvelope = {
    data: FoodlistsCreateManyRestaurant_detailsInput | FoodlistsCreateManyRestaurant_detailsInput[]
    skipDuplicates?: boolean
  }

  export type SimilarProductsCreateWithoutRestaurant_detailsInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
  }

  export type SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
  }

  export type SimilarProductsCreateOrConnectWithoutRestaurant_detailsInput = {
    where: SimilarProductsWhereUniqueInput
    create: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput>
  }

  export type SimilarProductsCreateManyRestaurant_detailsInputEnvelope = {
    data: SimilarProductsCreateManyRestaurant_detailsInput | SimilarProductsCreateManyRestaurant_detailsInput[]
    skipDuplicates?: boolean
  }

  export type RestaurantUpsertWithoutRestaurant_detailsInput = {
    update: XOR<RestaurantUpdateWithoutRestaurant_detailsInput, RestaurantUncheckedUpdateWithoutRestaurant_detailsInput>
    create: XOR<RestaurantCreateWithoutRestaurant_detailsInput, RestaurantUncheckedCreateWithoutRestaurant_detailsInput>
    where?: RestaurantWhereInput
  }

  export type RestaurantUpdateToOneWithWhereWithoutRestaurant_detailsInput = {
    where?: RestaurantWhereInput
    data: XOR<RestaurantUpdateWithoutRestaurant_detailsInput, RestaurantUncheckedUpdateWithoutRestaurant_detailsInput>
  }

  export type RestaurantUpdateWithoutRestaurant_detailsInput = {
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RestaurantUncheckedUpdateWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodlistsUpsertWithWhereUniqueWithoutRestaurant_detailsInput = {
    where: FoodlistsWhereUniqueInput
    update: XOR<FoodlistsUpdateWithoutRestaurant_detailsInput, FoodlistsUncheckedUpdateWithoutRestaurant_detailsInput>
    create: XOR<FoodlistsCreateWithoutRestaurant_detailsInput, FoodlistsUncheckedCreateWithoutRestaurant_detailsInput>
  }

  export type FoodlistsUpdateWithWhereUniqueWithoutRestaurant_detailsInput = {
    where: FoodlistsWhereUniqueInput
    data: XOR<FoodlistsUpdateWithoutRestaurant_detailsInput, FoodlistsUncheckedUpdateWithoutRestaurant_detailsInput>
  }

  export type FoodlistsUpdateManyWithWhereWithoutRestaurant_detailsInput = {
    where: FoodlistsScalarWhereInput
    data: XOR<FoodlistsUpdateManyMutationInput, FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsInput>
  }

  export type FoodlistsScalarWhereInput = {
    AND?: FoodlistsScalarWhereInput | FoodlistsScalarWhereInput[]
    OR?: FoodlistsScalarWhereInput[]
    NOT?: FoodlistsScalarWhereInput | FoodlistsScalarWhereInput[]
    id?: IntFilter<"Foodlists"> | number
    food_list_id?: StringFilter<"Foodlists"> | string
    food_name?: StringFilter<"Foodlists"> | string
    rating?: StringNullableFilter<"Foodlists"> | string | null
    product_image?: StringFilter<"Foodlists"> | string
    descriptions?: StringFilter<"Foodlists"> | string
    restaurant_details_id?: StringFilter<"Foodlists"> | string
  }

  export type SimilarProductsUpsertWithWhereUniqueWithoutRestaurant_detailsInput = {
    where: SimilarProductsWhereUniqueInput
    update: XOR<SimilarProductsUpdateWithoutRestaurant_detailsInput, SimilarProductsUncheckedUpdateWithoutRestaurant_detailsInput>
    create: XOR<SimilarProductsCreateWithoutRestaurant_detailsInput, SimilarProductsUncheckedCreateWithoutRestaurant_detailsInput>
  }

  export type SimilarProductsUpdateWithWhereUniqueWithoutRestaurant_detailsInput = {
    where: SimilarProductsWhereUniqueInput
    data: XOR<SimilarProductsUpdateWithoutRestaurant_detailsInput, SimilarProductsUncheckedUpdateWithoutRestaurant_detailsInput>
  }

  export type SimilarProductsUpdateManyWithWhereWithoutRestaurant_detailsInput = {
    where: SimilarProductsScalarWhereInput
    data: XOR<SimilarProductsUpdateManyMutationInput, SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsInput>
  }

  export type SimilarProductsScalarWhereInput = {
    AND?: SimilarProductsScalarWhereInput | SimilarProductsScalarWhereInput[]
    OR?: SimilarProductsScalarWhereInput[]
    NOT?: SimilarProductsScalarWhereInput | SimilarProductsScalarWhereInput[]
    id?: IntFilter<"SimilarProducts"> | number
    similar_restaurants_id?: StringFilter<"SimilarProducts"> | string
    image_url?: StringFilter<"SimilarProducts"> | string
    title?: StringFilter<"SimilarProducts"> | string
    rating?: StringFilter<"SimilarProducts"> | string
    timing?: StringFilter<"SimilarProducts"> | string
    restaurant_details_id?: StringFilter<"SimilarProducts"> | string
  }

  export type RestaurantDetailsCreateWithoutFood_listInput = {
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant: RestaurantCreateNestedOneWithoutRestaurant_detailsInput
    similar_product?: SimilarProductsCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsUncheckedCreateWithoutFood_listInput = {
    id?: number
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant_id: string
    similar_product?: SimilarProductsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsCreateOrConnectWithoutFood_listInput = {
    where: RestaurantDetailsWhereUniqueInput
    create: XOR<RestaurantDetailsCreateWithoutFood_listInput, RestaurantDetailsUncheckedCreateWithoutFood_listInput>
  }

  export type RestaurantDetailsUpsertWithoutFood_listInput = {
    update: XOR<RestaurantDetailsUpdateWithoutFood_listInput, RestaurantDetailsUncheckedUpdateWithoutFood_listInput>
    create: XOR<RestaurantDetailsCreateWithoutFood_listInput, RestaurantDetailsUncheckedCreateWithoutFood_listInput>
    where?: RestaurantDetailsWhereInput
  }

  export type RestaurantDetailsUpdateToOneWithWhereWithoutFood_listInput = {
    where?: RestaurantDetailsWhereInput
    data: XOR<RestaurantDetailsUpdateWithoutFood_listInput, RestaurantDetailsUncheckedUpdateWithoutFood_listInput>
  }

  export type RestaurantDetailsUpdateWithoutFood_listInput = {
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant?: RestaurantUpdateOneRequiredWithoutRestaurant_detailsNestedInput
    similar_product?: SimilarProductsUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsUncheckedUpdateWithoutFood_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant_id?: StringFieldUpdateOperationsInput | string
    similar_product?: SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsCreateWithoutSimilar_productInput = {
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant: RestaurantCreateNestedOneWithoutRestaurant_detailsInput
    food_list?: FoodlistsCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsUncheckedCreateWithoutSimilar_productInput = {
    id?: number
    restaurant_details_id?: string
    title: string
    rating: string
    price: string
    location: string
    timing: string
    restaurant_text: string
    restaurant_id: string
    food_list?: FoodlistsUncheckedCreateNestedManyWithoutRestaurant_detailsInput
  }

  export type RestaurantDetailsCreateOrConnectWithoutSimilar_productInput = {
    where: RestaurantDetailsWhereUniqueInput
    create: XOR<RestaurantDetailsCreateWithoutSimilar_productInput, RestaurantDetailsUncheckedCreateWithoutSimilar_productInput>
  }

  export type RestaurantDetailsUpsertWithoutSimilar_productInput = {
    update: XOR<RestaurantDetailsUpdateWithoutSimilar_productInput, RestaurantDetailsUncheckedUpdateWithoutSimilar_productInput>
    create: XOR<RestaurantDetailsCreateWithoutSimilar_productInput, RestaurantDetailsUncheckedCreateWithoutSimilar_productInput>
    where?: RestaurantDetailsWhereInput
  }

  export type RestaurantDetailsUpdateToOneWithWhereWithoutSimilar_productInput = {
    where?: RestaurantDetailsWhereInput
    data: XOR<RestaurantDetailsUpdateWithoutSimilar_productInput, RestaurantDetailsUncheckedUpdateWithoutSimilar_productInput>
  }

  export type RestaurantDetailsUpdateWithoutSimilar_productInput = {
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant?: RestaurantUpdateOneRequiredWithoutRestaurant_detailsNestedInput
    food_list?: FoodlistsUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type RestaurantDetailsUncheckedUpdateWithoutSimilar_productInput = {
    id?: IntFieldUpdateOperationsInput | number
    restaurant_details_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
    restaurant_text?: StringFieldUpdateOperationsInput | string
    restaurant_id?: StringFieldUpdateOperationsInput | string
    food_list?: FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsNestedInput
  }

  export type FoodlistsCreateManyRestaurant_detailsInput = {
    id?: number
    food_list_id?: string
    food_name: string
    rating?: string | null
    product_image: string
    descriptions: string
  }

  export type SimilarProductsCreateManyRestaurant_detailsInput = {
    id?: number
    similar_restaurants_id?: string
    image_url: string
    title: string
    rating: string
    timing: string
  }

  export type FoodlistsUpdateWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
  }

  export type FoodlistsUncheckedUpdateWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
  }

  export type FoodlistsUncheckedUpdateManyWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    food_list_id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    product_image?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsUpdateWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsUncheckedUpdateWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarProductsUncheckedUpdateManyWithoutRestaurant_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    similar_restaurants_id?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    timing?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RestaurantDetailsCountOutputTypeDefaultArgs instead
     */
    export type RestaurantDetailsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantDetailsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantDefaultArgs instead
     */
    export type RestaurantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RestaurantDetailsDefaultArgs instead
     */
    export type RestaurantDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RestaurantDetailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodlistsDefaultArgs instead
     */
    export type FoodlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodlistsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SimilarProductsDefaultArgs instead
     */
    export type SimilarProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SimilarProductsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}